Object subclass: #FlotaCazas	instanceVariableNames: 'plano listaCazas flotasMostradas posicionXOriginal posicionYOriginal'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!FlotaCazas commentStamp: '<historical>' prior: 0!Clase para manejar flotas de cazas. Las coloca de tal manera que se mueven en forma de VInstance Variables:	listaCazas	<Object>	flotasMostradas	<ProtoObject | PseudoContext>	posicionXOriginal	<Color | DateAndTime | Duration | Interval | Number | Point | Timespan | TraitComposition | TraitDescription | TraitTransformation>	posicionYOriginal	<ProtoObject | PseudoContext>!!FlotaCazas methodsFor: 'acciones' stamp: 'Barbara 5/4/2011 08:58'!PosicionarYUbicarNuevoCaza"Se encarga de analizar la formacion de los cazas, y de ir ubicando nuevos cazasen el plano, si es que todas las lineas de cazas no se mostraron aun- ."	((listaCazas at: 5) avanzo3Pasos)ifTrue:[^true].	((listaCazas at: 2) avanzo3Pasos)ifTrue:[		(listaCazas at:4) determinarPosicionEnX: ( posicionXOriginal+10 ) EnY: (posicionYOriginal ).		(listaCazas at:5) determinarPosicionEnX:  (posicionXOriginal-10)  EnY: (posicionYOriginal) .		plano agregarNave: (listaCazas at:4) .		plano agregarNave: (listaCazas at:5) .		(listaCazas at:4) determinarPlano: plano.		(listaCazas at:5) determinarPlano: plano.		^nil.		].	((listaCazas at: 1) avanzo3Pasos)ifTrue:[		(listaCazas at:3) determinarPosicionEnX: (posicionXOriginal+5)  EnY: ( posicionYOriginal ) .		(listaCazas at:2) determinarPosicionEnX: (posicionXOriginal-5)  EnY: (posicionYOriginal) .		(listaCazas at:3) determinarPlano: plano.		(listaCazas at:2) determinarPlano: plano.		plano agregarNave: (listaCazas at:2) .		plano agregarNave: (listaCazas at:3) .		].! !!FlotaCazas methodsFor: 'acciones' stamp: 'Barbara 4/22/2011 06:03'!devolverListaCazas"Devuelve una lista con todas las naves de la flota; El primer lugar lo ocupara la nave lider,el segundo y el tercero las naves que le siguen, el cuarto y el quinto losdos ultimos lugares, son las naves que se encuentran mas atras."	^listaCazas! !!FlotaCazas methodsFor: 'privados' stamp: 'Barbara 4/21/2011 21:06'!determinarListaCazas: flota	listaCazas:=flota.! !!FlotaCazas methodsFor: 'privados' stamp: 'Barbara 5/4/2011 08:40'!determinarPlano: planoJuego	plano:=planoJuego .! !!FlotaCazas methodsFor: 'privados' stamp: 'Barbara 4/22/2011 05:16'!determinarPosicionX:x PosicionY:y.	posicionXOriginal :=x.	posicionYOriginal :=y.! !!FlotaCazas methodsFor: 'privados' stamp: 'Barbara 4/21/2011 21:20'!devolverNaveLider"Devuelve la nave lider de la flota de cazas- es decir, la que se encuentra adelante de todas."	^(listaCazas at:1).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FlotaCazas class	instanceVariableNames: ''!!FlotaCazas class methodsFor: 'initializate' stamp: 'Barbara 5/4/2011 08:57'!crearFlotaCentradaEnPosicionX:x PosicionY:y enPlano:planoDeJuego"Crea una flota, cuyo lider (es decir, la nave que esta adelante de todas) se colocaraen la posicion x,y. "	|array flota caza n|		flota:= FlotaCazas new.	n:=0.	array:= Array new: 5.	flota determinarPlano: planoDeJuego.		[n<5] whileTrue: [		caza:= Caza new.		n:=n+1.		array at: n put: caza. ].	(array at:1) determinarPosicionEnX: x EnY: y.	(array at:1)  determinarPlano: planoDeJuego.	planoDeJuego agregarNave: (array at:1) .	flota determinarPosicionX: x PosicionY:y. 	flota determinarListaCazas: array.		^flota.! !Object subclass: #Nivel	instanceVariableNames: 'puntosNivelActual puntosTotales numeroNivel'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Nivel commentStamp: '<historical>' prior: 0!Clase nivel. Se encarga de los puntos del nivel actual, los puntos acumulados y de pasar el nivelInstance Variables:	puntosNivelActual	<DateAndTime | Duration | Number | Point | Timespan>	puntosTotales	<AbstractSound | Color | DateAndTime | Duration | Interval | Number | Point | Timespan | TraitComposition | TraitDescription | TraitTransformation>	nivelActual	<ProtoObject | PseudoContext>!]style[(396)f1!!Nivel methodsFor: 'acciones' stamp: 'Barbara 5/5/2011 02:41'!actuarCon: listaEliminados"La accion del nivel consiste en sumar su puntaje e intentar avanzar, si es que se puede"	self sumarPuntajeTurno: listaEliminados.	[self avanzarNivel ]ifError: [^nil.].! !!Nivel methodsFor: 'acciones' stamp: 'Barbara 4/22/2011 04:49'!avanzarNivel"Avanza un nivel"	(puntosNivelActual >=1000)ifTrue:[		puntosNivelActual:=0.		numeroNivel:=numeroNivel +1.	] ifFalse: [NivelError new signal:'Los puntos no son suficientes para subir de nivel'].! !!Nivel methodsFor: 'acciones' stamp: 'Barbara 5/5/2011 20:54'!sumarPuntajeTurno: listaEliminados	"Recibe la lista de enemigos que elimino el algo42 durante un turno	y los agrega tanto al puntaje total como al puntaje del nivel actual.	Si el puntaje actual es mayor a 1000, avanza un nivel"	listaEliminados do: [:cadaNave|		(cadaNave estadoActualDestruida )ifTrue:[			puntosNivelActual:=puntosNivelActual+cadaNave devolverPuntosPorEliminacion .			puntosTotales :=puntosTotales +cadaNave devolverPuntosPorEliminacion .			]		].	(puntosNivelActual>=1000)ifTrue:[self avanzarNivel]! !!Nivel methodsFor: 'devolverInformacion' stamp: 'Barbara 4/21/2011 22:14'!devolverNumeroNivel 	^numeroNivel .! !!Nivel methodsFor: 'devolverInformacion' stamp: 'Barbara 4/21/2011 22:15'!devolverPuntosActuales	^puntosNivelActual .! !!Nivel methodsFor: 'devolverInformacion' stamp: 'Barbara 4/21/2011 22:15'!devolverPuntuacionTotal	^puntosTotales .! !!Nivel methodsFor: 'Inicializar' stamp: 'Barbara 4/21/2011 22:37'!initialize 	numeroNivel :=1.	puntosNivelActual :=0.	puntosTotales :=0.! !Object subclass: #ObjetoUbicable	instanceVariableNames: 'rectangulo plano'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!ObjetoUbicable commentStamp: '<historical>' prior: 0!Todos los objetos que se pueden ubicar en el escenario de juego heredan de esta clase:Todos deben tener una instancia de rectangulo que los representa en el espacio y que les da un tamaño y una ubicacion.Instance Variables:	rectangulo	<Rectangulo>!]style[(250)f1!!ObjetoUbicable methodsFor: 'Inicializadores' stamp: 'Barbara 5/1/2011 13:35'!determinarPlano:planoDelObjeto	"Toda instancia de objeto ubicable esta contenida en un plano. Para permitir la interaccion entre objetos	contenidos en el mismo plano, toda instancia de ObjetoUbicable tiene una referencia al plano que lo contiene.	Este metodo sirve para determinar el plano del objeto."	plano:=planoDelObjeto .! !!ObjetoUbicable methodsFor: 'Inicializadores' stamp: 'Barbara 4/20/2011 10:29'!initialize "Inicializa un objeto ubicable como clase abstractaLas instancias de este objeto pueden ser cualquier objeto que sea ubicable, y en esta implementacion, todo objeto que puede ubicarse e incluso cambiar su ubicacion en el planocontiene un rectangulo que determina su posicion y los limites de su figura."	self subclassResponsibility! !!ObjetoUbicable methodsFor: 'Acciones' stamp: 'Barbara 5/1/2011 14:18'!actuar	"Cada objeto realiza las acciones pertinentes."	self subclassResponsibility .! !!ObjetoUbicable methodsFor: 'Acciones' stamp: 'Barbara 4/20/2011 10:45'!coincidePosicionCon: figuraRectangulo	"Toda instancia de esta clase contiene un rectangulo que representa su figura. 	Este metodo devuelve true si la posicion del objeto ubicable se superpone en 	al menos un punto con el rectangulo que recibe por parametro."		^(rectangulo coincideConPosicionDe: figuraRectangulo )! !!ObjetoUbicable methodsFor: 'Acciones' stamp: 'Barbara 4/21/2011 19:56'!determinarPosicionEnX: x EnY:y	"Ubica el objeto en la posicion determinada"	rectangulo determinarUbicacionEnX: x EnY: y. ! !!ObjetoUbicable methodsFor: 'DevolucionesDeInformacion' stamp: 'Barbara 4/20/2011 10:26'!devolverPosicionX	^rectangulo devolverPosicionX.! !!ObjetoUbicable methodsFor: 'DevolucionesDeInformacion' stamp: 'Barbara 4/20/2011 10:26'!devolverPosicionY	^rectangulo devolverPosicionY.! !ObjetoUbicable subclass: #Arma	instanceVariableNames: 'danio usada origenAlgo42'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Arma commentStamp: '<historical>' prior: 0!Todas las naves del juego heredan de esta clase.Instance Variables:	danio	<Integer>	usada	<Boolean>	origenAlgo42	<Boolean>!]style[(127)f1!!Arma methodsFor: 'acciones' stamp: 'Barbara 5/1/2011 14:43'!actuar				self intentarMovimiento .		(origenAlgo42 )ifTrue: [			plano listaNaves do: [:cadaNave|					self intentarAtacar: cadaNave .					].			] ifFalse: [					self intentarAtacar: (plano algo42 ).].		(usada)ifTrue:[plano agregarArmaUsada: self.].! !!Arma methodsFor: 'acciones' stamp: 'Barbara 5/5/2011 21:17'!intentarAtacar: nave	"Ataca a la nave que recibe por parametro. Devuelve true si el ataque fue efectivo, false en caso contrario"	(((nave operable)=true)&(origenAlgo42))ifTrue:[			AlgoSeAtacaASiMismoError new signal:'Una nave algo42 no puede atacarse a si misma'		].	(((nave operable)=false)&(origenAlgo42=false))ifTrue:[			AtaqueEntreNavesNoOperables new signal:'Una nave no operable no puede atacar a otra del mismo tipo'		].		((nave coincidePosicionCon: (rectangulo)) & (usada=false)) ifTrue:[			nave modificarEnergia: danio.			usada:=true.			^true].	^false.! !!Arma methodsFor: 'acciones' stamp: 'Barbara 5/1/2011 14:48'!intentarMovimiento	"El arma cambia su posicion en el plano.	Si el arma sale de los limites del plano, cambia su estado a usada"	|x y|	x:=plano ancho.	y:=plano altura.	(self devolverPosicionX<0 | (self devolverPosicionX>x) ) ifTrue:[		usada:=true.		plano agregarArmaUsada: self.		].	(self devolverPosicionY<0 | (self devolverPosicionY>y) ) ifTrue:[		usada:=true.		plano agregarArmaUsada: self.		].	(usada) ifFalse:[		self mover.		].! !!Arma methodsFor: 'acciones' stamp: 'Barbara 4/22/2011 00:23'!mover	"El arma cambia su posicion"	(origenAlgo42)ifTrue: [self determinarPosicionEnX:self devolverPosicionX EnY: (self devolverPosicionY)+2 ]	ifFalse: [self determinarPosicionEnX:self devolverPosicionX EnY: (self devolverPosicionY)-2 ].! !!Arma methodsFor: 'Inicializar' stamp: 'Barbara 4/17/2011 19:43'!initialize "Inicializa un arma como clase abstracta"	self subclassResponsibility! !!Arma methodsFor: 'DevolverModificarInformacion' stamp: 'Barbara 4/22/2011 00:48'!InicializarOrigenAlgo42:verdaderoOFalso"true indica que quien lanzó el arma fue una instancia de Algo42,false en caso contrario."	origenAlgo42 := verdaderoOFalso .! !!Arma methodsFor: 'DevolverModificarInformacion' stamp: 'Barbara 5/5/2011 02:11'!estadoUsado"Devuelve true si el arma fue usada"	^usada.! !!Arma methodsFor: 'DevolverModificarInformacion' stamp: 'Barbara 4/22/2011 00:44'!origenAlgo42"true indica que quien lanzó el arma fue una instancia de Algo42,false en caso contrario."	^origenAlgo42 .! !Arma subclass: #Cohete	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Cohete commentStamp: '<historical>' prior: 0!Una de las armas del juego. Cohete causa un danio de 30 puntos.!]style[(63)f1!!Cohete methodsFor: 'Inicializadores' stamp: 'Barbara 5/2/2011 23:57'!initialize"Inicializa una nueva instancia de Cohete"	danio:= -30.	usada:=false.	rectangulo:= Rectangulo crearRectanguloAltura: 4 Ancho: 2.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cohete class	instanceVariableNames: ''!!Cohete class methodsFor: 'Inicializar' stamp: 'Barbara 5/1/2011 14:27'!LanzarCohetePosicionEnX:x EnY:y OrigenAlgo42:vOf EnPlano:planoJuego"Crea una instancia de laser y la coloca en la posicion x, y"	|cohete|	cohete:=Cohete  new.	cohete determinarPlano: planoJuego.	planoJuego agregarArma: cohete.	cohete InicializarOrigenAlgo42: vOf.	cohete determinarPosicionEnX: x EnY:y.	^cohete.! !ObjetoUbicable subclass: #Item	instanceVariableNames: 'usado'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Item commentStamp: '<historical>' prior: 0!Clase abstracta de la cual heredaran los items del juegoInstance Variables:	usado	<Boolean>!]style[(94)f1!!Item methodsFor: 'Acciones' stamp: 'Barbara 5/1/2011 14:23'!actuar	"Cada item debe realizar algun efecto en algo42, dependiendo de que tipo de item sea"	self intentarEfectoEn: (plano algo42).	(usado) ifTrue: [plano agregarItemUsado: self.]	! !!Item methodsFor: 'Acciones' stamp: 'Barbara 4/17/2011 15:18'!intentarEfectoEn: algo42	"Recibe una nave Algo42 (la nave manejada por el usuario) e intenta aplicar el efecto del item sobre ella:	Para eso, el algo42 debe estar en la misma posicion que el item"	self subclassResponsibility! !!Item methodsFor: 'inicializar' stamp: 'Barbara 4/17/2011 19:48'!initialize 	self subclassResponsibility .! !!Item methodsFor: 'estados' stamp: 'Barbara 5/5/2011 01:59'!usado "Devuelve true si el item ya fue usado, false en caso contrario"	^usado.! !Item subclass: #ArmaAbandonada	instanceVariableNames: 'numeroTorpedos numeroCohetes'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!ArmaAbandonada commentStamp: '<historical>' prior: 0!Si una instancia de algo42 usa una instancia de esta arma abandonada, recibe 3 cohetes y 2 torpedos.Instance Variables:	numeroTorpedos	<Integer>	numeroCohetes	<Integer>!!ArmaAbandonada methodsFor: 'Acciones' stamp: 'Barbara 4/22/2011 07:59'!intentarEfectoEn: algo42	"Recibe una nave tipo Algo42; y le suma las armas que dejo la nave enemiga."	(algo42 coincidePosicionCon: (rectangulo)) ifTrue:[		algo42 aumentarTorpedos:numeroTorpedos Cohetes: numeroCohetes.		usado:=true.	].! !!ArmaAbandonada methodsFor: 'inicializar' stamp: 'Barbara 5/2/2011 23:56'!initialize"Inicializa un item"	usado:=false.	numeroTorpedos:=2.	numeroCohetes :=3.	rectangulo:=Rectangulo crearRectanguloAltura:3 Ancho:3.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ArmaAbandonada class	instanceVariableNames: ''!!ArmaAbandonada class methodsFor: 'as yet unclassified' stamp: 'Barbara 4/22/2011 11:15'!DejarArmaPosicionEnX:x EnY:y"Crea una instancia de arma y la coloca en la posicion x, y"	|arma|	arma:= ArmaAbandonada   new.	arma determinarPosicionEnX: x EnY:y.	^arma.! !Arma subclass: #Laser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Laser commentStamp: '<historical>' prior: 0!Una de las armas del juego. Laser causa un danio de 10 puntos.!]style[(62)f1!!Laser methodsFor: 'Inicializadores' stamp: 'Barbara 5/2/2011 23:58'!initialize"Inicializa una nueva instancia de Laser"	danio:= -10.	usada:=false.	rectangulo:= Rectangulo crearRectanguloAltura: 5 Ancho: 1.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Laser class	instanceVariableNames: ''!!Laser class methodsFor: 'as yet unclassified' stamp: 'Barbara 5/1/2011 14:29'!LanzarLaserPosicionEnX:x EnY:y OrigenAlgo42:vOf EnPlano:planoJuego"Crea una instancia de laser y la coloca en la posicion x, y"	|laser|	laser:=Laser  new.	laser determinarPlano: planoJuego.	planoJuego agregarArma: laser.	laser InicializarOrigenAlgo42: vOf.	laser determinarPosicionEnX: x EnY:y.	^laser.! !ObjetoUbicable subclass: #Nave	instanceVariableNames: 'energia destruida operable'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Nave commentStamp: '<historical>' prior: 0!Todas las naves del juego heredan de esta clase.Instance Variables:	energia	<Number>	destruida	<Boolean>!!Nave methodsFor: 'devolverModificarInformacion' stamp: 'Barbara 4/17/2011 12:18'!devolverCantidadEnergia	"devuelve la cantidad de energia actual con la que cuenta la nave"	^ energia.! !!Nave methodsFor: 'devolverModificarInformacion' stamp: 'Barbara 4/17/2011 12:19'!estadoActualDestruida	"Devuelve True si la nave está destruida".	^ destruida.! !!Nave methodsFor: 'devolverModificarInformacion' stamp: 'Barbara 5/5/2011 21:18'!modificarEnergia: puntosModificar"Recibe una cierta cantidad de puntos y los suma a la energía de la nave."	energia := energia+puntosModificar.	(energia<=0) ifTrue: [		self destruirse.		 ].! !!Nave methodsFor: 'devolverModificarInformacion' stamp: 'Barbara 5/2/2011 18:38'!operable "Devuelve true si se trata de una nave operable; false en caso contrario"	^operable.! !!Nave methodsFor: 'Inicializar' stamp: 'Barbara 5/1/2011 13:30'!initialize 	self subclassResponsibility .! !!Nave methodsFor: 'as yet unclassified' stamp: 'Barbara 5/5/2011 21:19'!destruirse"Lleva a cabo las acciones correspondientes si debe destruirse"	(self devolverCantidadEnergia>0)ifTrue:[		NaveNoDestruidaError new signal: 'La nave aun tiene energia en su tanque'			]	ifFalse:[		destruida:= true.		(plano) agregarNaveEliminada:self.		]! !Nave subclass: #Algo42	instanceVariableNames: 'torpedos cohetes'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Algo42 commentStamp: '<historical>' prior: 0!crea una instancia de algo42, que es la nave principal del juego. Es la unica nave que puede ser manejada por el jugador.Instance Variables:	torpedos	<Number>	cohetes	<Number>!!Algo42 methodsFor: 'inicializar' stamp: 'Barbara 5/2/2011 23:57'!initialize"Inicializa la energia del algo42 en 100 puntos. Por otro lado, sólo comienza teniendo armas laser, por eso los torpedos y cohetes son inicializados como 0" 	energia:= 100.	torpedos:=0.	cohetes:=0.	rectangulo:= Rectangulo crearRectanguloAltura:5  Ancho:3. 	destruida:=false.	operable:=true.! !!Algo42 methodsFor: 'devolverModificarInformacion' stamp: 'Barbara 4/20/2011 09:50'!aumentarTorpedos: cantidad1 Cohetes:cantidad2	"Aumenta las cantidades de torpedos y cohetes recibidos por parametro"	torpedos:= torpedos+cantidad1.	cohetes:= cohetes+cantidad2.! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 5/5/2011 01:43'!destruirse! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 5/1/2011 14:28'!dispararCohete	"Crea una instancia de cohete en la posicion actual del algo42"	| cohete |	(cohetes<=0)ifTrue:[^ArmaNoDisponibleError new signal:'No hay cohetes que lanzar.'].	cohete :=Cohete LanzarCohetePosicionEnX:(self devolverPosicionX) EnY:(self devolverPosicionY) OrigenAlgo42:true EnPlano:plano.	cohetes:=cohetes-1.	^cohete.! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 5/1/2011 14:30'!dispararLaser	"Crea una instancia de laser en la posicion actual de la nave"	| laser |	laser:=Laser LanzarLaserPosicionEnX: (self devolverPosicionX) EnY:( self devolverPosicionY) OrigenAlgo42: true EnPlano:plano.	^laser.! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 5/2/2011 19:17'!dispararTorpedoHacia: nave 	"Crea una instancia de torpedo rastreador en la posicion actual del algo42,	que perseguira a la nave que reciba por parametro"	| torpedo |	(nave=self)ifTrue:[^NaveARastrearError new signal:'La nave rastreada no puede ser la misma algo'].	(torpedos<=0)ifTrue:[^ArmaNoDisponibleError new signal:'No hay torpedos que lanzar.'].	torpedo := TorpedoRastreador lanzarTorpedoRastreadorPosicionEnX:(self devolverPosicionX) EnY:(self devolverPosicionY) OrigenAlgo:true EnPlano:plano.	torpedo determinarNaveRastrada: nave.	torpedos:=torpedos-1.	^torpedo.! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 5/5/2011 01:40'!modificarEnergia: puntosModificar"Recibe una cierta cantidad de puntos y los suma a la energía de la nave."	energia := energia+puntosModificar.	(energia<=0) ifTrue: [		destruida:=true.		 ].! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 4/22/2011 11:50'!moverAbajo	"La nave Algo42 se mueve un lugar hacia abajo."	(rectangulo devolverPosicionY<=0) ifTrue: [AreaInvalidaError new signal:'La nave ya no puede moverse mas hacia abajo.'] ifFalse:[		self determinarPosicionEnX: (rectangulo devolverPosicionX) EnY: (rectangulo devolverPosicionY - 1).		]! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 5/1/2011 13:50'!moverArriba	"La nave Algo42 se mueve un lugar hacia arriba."	((rectangulo devolverPosicionY) + (rectangulo devolverAltura)>(plano altura)) ifTrue: [AreaInvalidaError new signal:'La nave ya no puede moverse mas hacia arriba.'] ifFalse:[		self determinarPosicionEnX:  (rectangulo devolverPosicionX) EnY: (rectangulo devolverPosicionY + 1).].! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 5/1/2011 13:46'!moverDerecha.	"La nave Algo42 se mueve un lugar a la Derecha."	((rectangulo devolverPosicionX + rectangulo devolverAncho)>(plano ancho)) ifTrue: [AreaInvalidaError new signal:'La nave ya no puede moverse mas a la derecha.'] ifFalse:[		self determinarPosicionEnX: (rectangulo devolverPosicionX)+1 EnY: rectangulo devolverPosicionY.].! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 4/22/2011 11:50'!moverIzquierda	"La nave Algo42 se mueve un lugar a la izquierda."	(rectangulo devolverPosicionX<=0) ifTrue: [AreaInvalidaError new signal:'La nave ya no puede moverse mas a la izquierda.'] ifFalse:[		self determinarPosicionEnX: (rectangulo devolverPosicionX)-1 EnY: rectangulo devolverPosicionY.		]! !!Algo42 methodsFor: 'acciones' stamp: 'Barbara 5/2/2011 19:38'!recibirChoque "Cuando una nave algo42 es chocada, esta funcion calcula sus danios"	self modificarEnergia:-30.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Algo42 class	instanceVariableNames: ''!!Algo42 class methodsFor: 'Constructor' stamp: 'Barbara 5/2/2011 20:46'!crearAlgo42PosicionX:x Y:y EnPlano:planoJuego"Crea una instancia de algo42 y lo coloca en la posicion x, y"	|algo |	algo:= Algo42 new.	algo determinarPlano: planoJuego.	(( (x<(planoJuego ancho)) & (y<(planoJuego altura)) )  & ((x>=0) & (y>=0) ) )ifFalse:[		^(AreaInvalidaError new signal:'La nave debe ser creada en una posicion valida dentro del area de juego.')		].	planoJuego introducirAlgo: algo.	algo determinarPosicionEnX: x EnY:y.	^algo.! !Nave subclass: #NaveNoOperable	instanceVariableNames: 'puntos fueraDeJuego'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!NaveNoOperable commentStamp: '<historical>' prior: 0!Todas las naves que no pueden ser utilizadas por el jugador deben heredar de esta clase abstracta.Instance Variables:	puntos	<Integer>	fueraDeJuego	<Boolean>!!NaveNoOperable methodsFor: 'acciones' stamp: 'Barbara 5/1/2011 15:15'!IntentarAccionSobre: algo42"La nave se mueve y lleva a cabo su funcion: Si esta en la posicion de algo42 lo choca. Silanza un arma, la agrega a la lista de Armas."	self subclassResponsibility .! !!NaveNoOperable methodsFor: 'acciones' stamp: 'Barbara 5/2/2011 21:35'!actuar		self intentarMovimiento.		self IntentarAccionSobre:(plano algo42).! !!NaveNoOperable methodsFor: 'acciones' stamp: 'Barbara 5/4/2011 12:19'!estaFueraDeArea "Decide si la nave esta fuera de area,es decir si con su movimiento ya llego a una posicion fuera del plano. En ese caso,cambia su estado fuera de juego a true"	( (rectangulo devolverPosicionX>100)| (rectangulo devolverPosicionX<0)| (rectangulo devolverPosicionY>100) | ((rectangulo devolverPosicionY)<0) ) ifTrue:[		fueraDeJuego := true.		^true.].	fueraDeJuego:=false.	^false.! !!NaveNoOperable methodsFor: 'acciones' stamp: 'Barbara 5/2/2011 19:48'!intentarChocar: algo42	"Recibe una nave Algo42 y la choca; Como consecuencia, la Algo42 pierde puntos 30 de su tanque de energia. Ademas, la nave es destruida."		(algo42 coincidePosicionCon: rectangulo) ifTrue:[			algo42 recibirChoque.			destruida :=true.			^true.].	^false.! !!NaveNoOperable methodsFor: 'acciones' stamp: 'Barbara 5/4/2011 08:36'!intentarMovimiento"La nave intenta moverse en una posicion diferente valida del plano. Para eso, primero realiza un movimiento por defecto (Implementado en la funcion mover). Si al moverse levanta una excepcion por superponerse con otra nave, uso la funcion moverAlternativo para realizar otro tipo de movimiento. Si sigue levantando error, entonces lo dejo en su lugar"	|posx posy superposicion|		posx:=self devolverPosicionX.	posy:=self devolverPosicionY .		[self mover.] on:  SuperposicionNavesError do: [			"Si llego a la conclusion de que, moviendolo, causo que se superponga con otra nave,			lo devuelvo a la posicion original y realizo algun movimiento alternativo."			self determinarPosicionEnX: posx EnY: posy.			[self moverAlternativo.] on: SuperposicionNavesError do:[				"Si con el movimiento alternativo sigue superponiendose con otra nave,				no le dejo moverse: Lo dejo en la posicion original"				self determinarPosicionEnX: posx EnY: posy.			].		].	self estaFueraDeArea.! !!NaveNoOperable methodsFor: 'acciones' stamp: 'Barbara 4/21/2011 20:14'!mover	"Metodo para cambiar la posicion de la nave."	self subclassResponsibility .! !!NaveNoOperable methodsFor: 'acciones' stamp: 'Barbara 5/2/2011 22:21'!moverAlternativo"Este metodo debe ser llamado cuando, por alguna razon, el movimiento que realizala nave por defecto no puede ser llevado a cabo."	self subclassResponsibility .! !!NaveNoOperable methodsFor: 'acciones' stamp: 'Barbara 4/21/2011 20:15'!retirarse	"Con este metodo, las naves no operables empiezan a retroceder en linea recta 	(Es decir, a ir hacia arriba, ya que las naves no operables siempre se mueven	de arriba a abajo) hasta salir del area de juego."	self determinarPosicionEnX: self devolverPosicionX  EnY:  (self devolverPosicionY )+1.! !!NaveNoOperable methodsFor: 'acciones' stamp: 'Barbara 5/2/2011 23:50'!seSuperponeConOtraNave"Devuelve true si la posicion de una nave se superpone con alguna otra de la lista."	(plano listaNaves )do: [:cadaNave|		((cadaNave coincidePosicionCon: rectangulo)&(cadaNave~~self)) ifTrue:[			^true.		].	].	^false.! !!NaveNoOperable methodsFor: 'inicializar' stamp: 'Barbara 4/17/2011 19:49'!initialize 	self subclassResponsibility .! !!NaveNoOperable methodsFor: 'DevolverInformacion' stamp: 'Barbara 4/18/2011 02:22'!devolverPuntosPorEliminacion"devuelve la cantidad de puntos que gana o pierde la Algo42 cuando destruye esta nave"	^puntos.! !!NaveNoOperable methodsFor: 'DevolverInformacion' stamp: 'Barbara 4/21/2011 19:44'!estadoActualFueraDeJuego"Devuelve el estado fueraDeJuego , que es un valor booleano.Devuelve true si la nave fue evaluada con la funcion estaFueraDeArea y diopositivo, lo cual significa que la nave esta ocupando un area que no lecorresponde."	^fueraDeJuego .! !NaveNoOperable subclass: #Avioneta	instanceVariableNames: 'puntosAdelante puntosAtras'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Avioneta commentStamp: '<historical>' prior: 0!La avioneta es una nave enemiga que se inicializa con 20 puntos de energia. Se ganan 20 puntos por destruirla. Se mueve en linea recta, y cuenta con arma laser.Sus instancias puntosAdelante y puntosAtras cumplen la funcion de contar cuantos pasos debe dar hacia adelante, y cuantos hacia atras; Es decir, cuando puntosAtras llega a 80, entonces comienza a volver, por lo cual hace 80 pasoa hacia adelante.Instance Variables:	puntosAdelante	<Number>	puntosAtras	<Number>!!Avioneta methodsFor: 'Inicializar' stamp: 'Barbara 5/2/2011 18:36'!initialize	"Inicializa una instancia de Avioneta"	puntos:=20.	energia:=20.	puntosAdelante:=0.	puntosAtras:=0.	operable:=false.	rectangulo:= Rectangulo crearRectanguloAltura: 6 Ancho:3. 	destruida:=false.	fueraDeJuego :=false.! !!Avioneta methodsFor: 'Acciones' stamp: 'Barbara 5/2/2011 21:32'!IntentarAccionSobre: algo42"Si la nave esta en la posicion de algo42 lo choca. Lanzaun laser y lo agrega a la lista de Armas."	|laser|	self intentarChocar:algo42.	laser:=self dispararLaser.	(plano listaArmas) add:laser.! !!Avioneta methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 03:17'!dispararLaser"Crea una instancia de laser en la posicion actual de la nave"	| laser |	laser:= Laser new.	laser:= Laser LanzarLaserPosicionEnX: (self devolverPosicionX) EnY: (self  devolverPosicionY) OrigenAlgo42:  false EnPlano: plano.	^laser.! !!Avioneta methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 09:20'!mover	"Metodo para el movimiento de la avioneta. Se mueve 60 puntos hacia adelante, luego 60 hacia atras,	y asi sucesivamente. Es la nave mas rapida, por lo cual se mueve dos lugares cada vez que	este metodo es invocado"		((puntosAdelante<=60) )ifTrue: [			puntosAdelante:=puntosAdelante+2.			self determinarPosicionEnX: (self devolverPosicionX) EnY:  ((self devolverPosicionY )-2).		]ifFalse:[			puntosAtras:=puntosAtras +2.			self determinarPosicionEnX: ((self devolverPosicionX))  EnY:  ((self devolverPosicionY )+2).			(puntosAtras>=60)ifTrue:[				puntosAtras :=0.				puntosAdelante :=0.]		].	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Avioneta methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 10:24'!moverAlternativo"Este metodo debe ser llamado cuando, por alguna razon, el movimiento que realizala nave por defecto no puede ser llevado a cabo."		((puntosAdelante<62) )ifTrue: [			puntosAtras:=0.			puntosAdelante:=0. "Hago que empiece a moverse hacia adelante desde 0,								pero antes lo hago moverse hacia atras, si es que puedo."			self determinarPosicionEnX: (self devolverPosicionX) EnY:  ((self devolverPosicionY )+2).	]ifFalse:[			puntosAtras:=0.			self determinarPosicionEnX: ((self devolverPosicionX))  EnY:  ((self devolverPosicionY )-2).		].	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Avioneta class	instanceVariableNames: ''!!Avioneta class methodsFor: 'Inicializar' stamp: 'Barbara 5/2/2011 23:31'!crearAvionetaPosicionEnX:x EnY:y EnPlano:planoJuego"Crea una instancia de avioneta y la coloca en la posicion x, y"	|avioneta superposicion |	avioneta:= Avioneta new.	avioneta determinarPlano: planoJuego.	avioneta determinarPosicionEnX: x EnY:y.	(avioneta seSuperponeConOtraNave)ifTrue:[		^(SuperposicionNavesError new signal:'La posicion ya esta ocupada.')		].	planoJuego agregarNave: avioneta.	^avioneta.! !NaveNoOperable subclass: #Bombardero	instanceVariableNames: 'haciaIzq haciaDer'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Bombardero commentStamp: '<historical>' prior: 0!La clase bombardero instancia naves enemigas que se mueven en zig zag.Cuenta con las siguientes armas: Lasers, cohetes y torpedos rastreadores. Sudestruccion suma 30 puntos.Instance Variables:	haciaIzq	<Number>	haciaDer	<Number>!!Bombardero methodsFor: 'Inicializar' stamp: 'Barbara 4/22/2011 07:20'!initialize	"Inicializa una instancia de Bombardero"	puntos:=30.	energia:=50.	haciaDer :=0.	haciaIzq :=0.	rectangulo:= Rectangulo crearRectanguloAltura: 7 Ancho:7. 	fueraDeJuego :=false.	destruida:=false.! !!Bombardero methodsFor: 'Acciones' stamp: 'Barbara 5/2/2011 21:32'!IntentarAccionSobre: algo42"Si la nave esta en la posicion de algo42 lo choca. Lanzauna instancia de arma aleatoria (laser, cohete o torpedo) y la agrega a la lista de Armas."	|arma|	self intentarChocar:algo42.	arma:=self lanzarArmaAleatoriaHacia: algo42.	(plano listaArmas) add:arma.! !!Bombardero methodsFor: 'Acciones' stamp: 'Barbara 4/22/2011 11:16'!dejarArma	"Crea una instancia de ArmaAbandonada y la devuelve. "	|item|	(destruida)ifFalse: [ItemNoDisponibleError new signal:'El bombardero aun no esta destruido, no puede dejar armas.'].	item:= ArmaAbandonada DejarArmaPosicionEnX:  (self devolverPosicionX) EnY: (self devolverPosicionY).	^item.! !!Bombardero methodsFor: 'Acciones' stamp: 'Barbara 5/1/2011 14:29'!dispararCohete	"Crea una instancia de cohete en la posicion actual de la nave"	| cohete |	cohete :=	cohete :=Cohete LanzarCohetePosicionEnX:(self devolverPosicionX) EnY:(self devolverPosicionY) OrigenAlgo42:false EnPlano:plano.	^cohete.! !!Bombardero methodsFor: 'Acciones' stamp: 'Barbara 5/1/2011 14:30'!dispararLaser"Crea una instancia de laser en la posicion actual de la nave"	| laser |	laser:= Laser new.	laser:=Laser LanzarLaserPosicionEnX: (self devolverPosicionX) EnY:( self devolverPosicionY) OrigenAlgo42: false EnPlano:plano.	^laser.! !!Bombardero methodsFor: 'Acciones' stamp: 'Barbara 5/1/2011 14:31'!dispararTorpedoHacia: algo42 	"Crea una instancia de torpedo rastreador en la posicion actual del bombaredero,	que perseguira a la instancia de algo42 que recibe por parametro"	| torpedo |	torpedo := TorpedoRastreador lanzarTorpedoRastreadorPosicionEnX:(self devolverPosicionX) EnY:(self devolverPosicionY) OrigenAlgo:false EnPlano:plano.	torpedo determinarNaveRastrada: algo42 .	^torpedo.! !!Bombardero methodsFor: 'Acciones' stamp: 'Barbara 4/18/2011 01:34'!lanzarArmaAleatoriaHacia:algo42"El bombardero tiene tres tipos de armas distintas para lanzar. Esta funcion crea un armaaleatoria: Busca un numero aleatorio del 1 al 3, si el numero es 1 lanza un laser, si es dos, un cohetey si es 3, un torpedo rastreador."	|r|	r:=Random new.	r nextInt:3 .	(r==1) ifTrue: [^(self dispararLaser)].	(r==2) ifTrue: [^(self dispararCohete)].	(r==3) ifTrue: [^(self dispararTorpedoHacia:algo42)].! !!Bombardero methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 01:46'!modificarEnergia: puntosModificar"Recibe una cierta cantidad de puntos y los suma a la energía de la nave. Ademas,si la energia es menor a 0, el bombardero deja un paquete de armas en el escenario de juego"	|itemDejado|	energia := energia+puntosModificar.	(energia<=0) ifTrue: [		self destruirse.		itemDejado := self dejarArma.		plano agregarItem: itemDejado .		].! !!Bombardero methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 08:32'!mover"El bombardero se mueve en Zig Zag; Primero se mueve 0.5 puntos hacia abajo y hacia la derecha.Cuando ya bajo 10 puntos, empieza a ir 0.5 puntos hacia abajo y hacia la izquierda, hasta bajar10 puntos mas, y asi sucesivamente."	(haciaDer <=10)ifTrue:[		self determinarPosicionEnX: self devolverPosicionX+0.5  EnY:  (self devolverPosicionY )-0.5.		haciaDer:=haciaDer+0.5.	]ifFalse:[		(haciaIzq  <=10)ifTrue:[			self determinarPosicionEnX: self devolverPosicionX-0.5  EnY:  (self devolverPosicionY )-0.5.			haciaIzq:=haciaIzq +0.5.		]ifFalse:[			haciaIzq:=0.			haciaDer:=0.]		].	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Bombardero methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 11:15'!moverAlternativo"Movimiento que se debe llevar a cabo si la funcion intentar movimiento comprueba que el movimientopor defecto provocaria un choque entre naves del mismo tipo. Intenta empezar el movimiento en zig zagen el sentido opuesto. Si no puede, se queda quieto."	(haciaDer <=10)ifTrue:[  "Se estaba moviendo hacia la derecha. Lo envio a la izquierda."		self determinarPosicionEnX: self devolverPosicionX-0.5  EnY:  (self devolverPosicionY )-0.5.		haciaDer:=10.5.		haciaIzq:=0.5.	]ifFalse:[		 "Se estaba moviendo hacia la izquierda. Lo envio a la derecha."		self determinarPosicionEnX: self devolverPosicionX+0.5  EnY:  (self devolverPosicionY )-0.5.		haciaDer:=0.5.		haciaIzq:=10.5.		].	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bombardero class	instanceVariableNames: ''!!Bombardero class methodsFor: 'Constructores' stamp: 'Barbara 5/2/2011 23:31'!crearBombarderoPosicionEnX:x EnY:y EnPlano:planoJuego"Crea una instancia debombardero y la coloca en la posicion x, y"	|bombardero|	bombardero:= Bombardero new.	bombardero determinarPlano: planoJuego.	bombardero determinarPosicionEnX: x EnY:y.	(bombardero seSuperponeConOtraNave)ifTrue:[		^(SuperposicionNavesError new signal:'La posicion ya esta ocupada.')		].	planoJuego agregarNave: bombardero.	^bombardero .	! !NaveNoOperable subclass: #Caza	instanceVariableNames: 'numero pasosAvanzados'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Caza commentStamp: '<historical>' prior: 0!La clase Caza instancia naves enemigas que se mueven hacia adelante.Sus unicas armas son torpedos comunes, y su destruccion suma 30 puntos.Instance Variables:	numero	<ProtoObject | PseudoContext>	pasosAvanzados	<Number>!!Caza methodsFor: 'Inicializar' stamp: 'Barbara 4/22/2011 07:20'!initialize	"Inicializa una instancia de Caza"	puntos:=50.	energia:=10.	pasosAvanzados:=0.	rectangulo:= Rectangulo crearRectanguloAltura: 4 Ancho:4. 	destruida:=false.	fueraDeJuego :=false.! !!Caza methodsFor: 'Acciones' stamp: 'Barbara 5/2/2011 21:32'!IntentarAccionSobre: algo42"Si la nave esta en la posicion de algo42 lo choca. Lanzaun torpedo y lo agrega a la lista de Armas."	|torpedo|	self intentarChocar:algo42.	torpedo:=self dispararLaser.	(plano listaArmas) add:torpedo.! !!Caza methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 01:52'!dejarTanque	"Crea una instancia de TanqueEnergia y la devuelve "	|item|	(destruida)ifFalse: [ItemNoDisponibleError new signal:'El caza aun no esta destruido, no puede dejar armas.'].	item:= TanqueEnergia crearTanquePosicionEnX:   (self devolverPosicionX)  EnY: (self devolverPosicionY).	^item.! !!Caza methodsFor: 'Acciones' stamp: 'Barbara 5/1/2011 14:32'!dispararTorpedo"Crea una instancia de TorpedoSimple en la posicion actual de la nave"	| torpedo |	torpedo:= TorpedoSimple lanzarTorpedoSimplePosicionEnX:(self devolverPosicionX) EnY:(self devolverPosicionY) EnPlano:plano.	^torpedo.! !!Caza methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 01:53'!modificarEnergia: puntosModificar"Recibe una cierta cantidad de puntos y los suma a la energía de la nave. Ademas,si la energia es menor a 0, el caza deja un tanque de energia en el escenario de juego"	|itemDejado|	energia := energia+puntosModificar.	(energia<=0) ifTrue: [		self destruirse.		itemDejado:= self dejarTanque.		plano agregarItem: itemDejado .		].! !!Caza methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 08:32'!mover "Los cazas se mueve hacia abajo."	self determinarPosicionEnX: self devolverPosicionX  EnY:  (self devolverPosicionY )-1.	pasosAvanzados:=pasosAvanzados+1. 	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Caza methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 08:32'!moverAlternativo"Movimiento que se debe llevar a cabo si la funcion intentar movimiento comprueba que el movimientopor defecto provocaria un choque entre naves del mismo tipo. Intenta moverse unaposicion hacia atras. Si no puede, se queda quieto."		self determinarPosicionEnX: self devolverPosicionX  EnY:  (self devolverPosicionY )+1.	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Caza methodsFor: 'privados' stamp: 'Barbara 4/22/2011 05:43'!avanzo3Pasos	"Devuelve true si la nave avanzo 3 pasos o mas"	(pasosAvanzados >2)ifTrue:[^true].	^false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Caza class	instanceVariableNames: ''!!Caza class methodsFor: 'Inicializar' stamp: 'Barbara 5/2/2011 23:31'!crearCazaPosicionEnX:x EnY:y EnPlano: planoJuego"Crea una instancia de caza y la coloca en la posicion x, y"	|caza|	caza:= Caza new.	caza determinarPlano: planoJuego.	caza determinarPosicionEnX: x EnY:y.	(caza seSuperponeConOtraNave)ifTrue:[		^(SuperposicionNavesError new signal:'La posicion ya esta ocupada.')		].	planoJuego agregarNave: caza.	^caza.! !NaveNoOperable subclass: #Civil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Civil commentStamp: '<historical>' prior: 0!Las naves civiles no atacan, pero pueden chocarse con un algo42. Si son destruidas, se pierden 300 puntos.!!Civil methodsFor: 'Acciones' stamp: 'Barbara 5/2/2011 21:32'!IntentarAccionSobre: algo42" Si la nave esta en la posicion de algo42 lo choca."	self intentarChocar:algo42.! !!Civil methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 08:31'!mover "La nave civil se mueve hacia abajo."	self determinarPosicionEnX: self devolverPosicionX  EnY:  (self devolverPosicionY )-1.	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Civil methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 08:31'!moverAlternativo"Movimiento que se debe llevar a cabo si la funcion intentar movimiento comprueba que el movimientopor defecto provocaria un choque entre naves del mismo tipo. Intenta moverse unaposicion hacia atras. Si no puede, se queda quieto."	self determinarPosicionEnX: self devolverPosicionX  EnY:  (self devolverPosicionY )+1.	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Civil methodsFor: 'Inicializar' stamp: 'Barbara 5/2/2011 23:57'!initialize	"Inicializa una instancia de nave Civil"	puntos:=-300.	energia:=1.	fueraDeJuego :=false.	operable:=false.	destruida:=false.	rectangulo:= Rectangulo crearRectanguloAltura: 5 Ancho:2. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Civil class	instanceVariableNames: ''!!Civil class methodsFor: 'as yet unclassified' stamp: 'Barbara 5/2/2011 23:32'!crearCivilPosicionEnX:x EnY:y EnPlano:planoJuego"Crea una instancia de nave civil y la coloca en la posicion x, y"	|civil|	civil:= Civil  new.	civil determinarPlano: planoJuego.	civil  determinarPosicionEnX: x EnY:y.	(civil seSuperponeConOtraNave)ifTrue:[		^(SuperposicionNavesError new signal:'La posicion ya esta ocupada.')		].	planoJuego agregarNave: civil.	^civil .	! !NaveNoOperable subclass: #Explorador	instanceVariableNames: 'inicializado anguloActual puntosHaciaAbajo radio centroInicialX centroInicialY'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Explorador commentStamp: '<historical>' prior: 0!No tiene armas. Se mueve en circulos. Su destruccion da 50 puntos.Instance Variables:	inicializado	<Boolean>	anguloActual	<Number>	puntosHaciaAbajo	<Number>	radio	<Color | Duration | Number | Point>	centroInicialX	<ProtoObject | PseudoContext>	centroInicialY	<Color | DateAndTime | Duration | Interval | Number | OBMetaNode | Point | Timespan | TraitComposition | TraitDescription | TraitTransformation>!!Explorador methodsFor: 'Inicializar' stamp: 'Barbara 5/2/2011 18:37'!initialize	"Inicializa una instancia de Explorador	El anguloActual contiene el numero por el cual hay que multiplicar a la constante pi	para hayar el angulo. Tambien contiene una constante radio, que determinara el radio	de los circulos de su trayectoria."	puntos:=50.	energia:=30.	inicializado:=false.	puntosHaciaAbajo :=0.	anguloActual :=0.	operable:=false.	rectangulo:= Rectangulo crearRectanguloAltura:5 Ancho:2. 	destruida:=false.	fueraDeJuego :=false.! !!Explorador methodsFor: 'acciones' stamp: 'Barbara 5/2/2011 21:33'!IntentarAccionSobre: algo42"Si la nave esta en la posicion de algo42 lo choca."	self intentarChocar:algo42.! !!Explorador methodsFor: 'acciones' stamp: 'Barbara 4/22/2011 04:22'!determinarPosicionEnX: x EnY:y	"Dada la mayor complejidad del movimiento del explorador, este metodo ubicar	no solo ubica a la nave en su lugar, sino que tambien guarda cual sera el centro de la 	circunferencia (esta debera tener su centro trasladado a la ubicacion x,y)"	rectangulo determinarUbicacionEnX: x EnY:y .	(inicializado)ifFalse:[		centroInicialX:= x-radio .		centroInicialY:=y.		inicializado:=true.		].! !!Explorador methodsFor: 'acciones' stamp: 'Barbara 5/4/2011 08:32'!mover "El explorador se mueve en circulos- "	|pi|	anguloActual := anguloActual+(1/12).	puntosHaciaAbajo :=puntosHaciaAbajo +0.5.	self determinarPosicionEnX: (radio*( ( Float pi *anguloActual) cos)+centroInicialX) EnY: (centroInicialY-(radio*( ((Float pi)*anguloActual) sin))-puntosHaciaAbajo).	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Explorador methodsFor: 'acciones' stamp: 'Barbara 5/4/2011 12:16'!moverAlternativo"Movimiento que se debe llevar a cabo si la funcion intentar movimiento comprueba que el movimientopor defecto provocaria un choque entre naves del tipo no operable. Este metodo hace que el exploradorretroceda en su angulo de giro y se mueva hacia arriba (en lugar de hacia abajo, que es el movimiento normal del explorador.)."	|pi |	anguloActual := anguloActual-(1/12).	puntosHaciaAbajo := puntosHaciaAbajo -0.5.	self determinarPosicionEnX: (radio*( ( Float pi *anguloActual) cos)+centroInicialX) EnY: (centroInicialY-(radio* ((Float pi)*anguloActual) sin)-puntosHaciaAbajo).	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Explorador methodsFor: 'privados' stamp: 'Barbara 4/22/2011 03:28'!determinarRadio:r"Determina el radio de giro del explorador"	radio:=r.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Explorador class	instanceVariableNames: ''!!Explorador class methodsFor: 'as yet unclassified' stamp: 'Barbara 5/2/2011 23:30'!crearExploradorPosicionX:x Y:y RadioDeGiro: r EnPlano:planoJuego"Crea una instancia de explorador en la posicion x,y. El radio de Giro r es el radio en el cual deberia girar el explorador."	|explorador|		explorador:= Explorador new.	explorador determinarPlano: planoJuego.	explorador determinarRadio: r.	explorador determinarPosicionEnX: x EnY:y.	(explorador seSuperponeConOtraNave)ifTrue:[		^(SuperposicionNavesError new signal:'La posicion ya esta ocupada.')		].	planoJuego agregarNave: explorador.	^explorador.! !NaveNoOperable subclass: #Guia	instanceVariableNames: 'flota'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Guia commentStamp: '<historical>' prior: 0!Clase nave guia. De ella heredan todas las naves guias del juego.Instance Variables:	flota	<ProtoObject | PseudoContext>!]style[(122)f1!!Guia methodsFor: 'Inicializadores' stamp: 'Barbara 4/18/2011 02:35'!initialize 	self subclassResponsibility .! !!Guia methodsFor: 'acciones' stamp: 'Barbara 5/5/2011 21:22'!destruirse	"La nave guia tiene una caracteristica especial: Cuando sus puntos de energia bajan,	si llegan a ser iguales o menores a cero, llama a la funcion flotaRetroceder; De esa manera,	las naves de la flota que perdieron su guia, huyen hacia atras."	(self devolverCantidadEnergia>0)ifTrue:[		NaveNoDestruidaError new signal: 'La nave aun tiene energia en su tanque'			]	ifFalse:[		destruida:= true.		(plano) agregarNaveEliminada:self.		self flotaRetroceder		].! !!Guia methodsFor: 'acciones' stamp: 'Barbara 4/22/2011 13:48'!flotaRetroceder"Todas las naves de la flota actual retroceden. Esta funcion debe ser llamada solamente sila nave guia fue destruida; En caso contrario, levanta una excepcion."	(destruida)ifTrue:[		flota do: [:cadaNave|			(cadaNave~~nil)ifTrue:[				cadaNave retirarse.			]		].	]ifFalse: [ GuiaNoDestruidaError new signal: 'La nave guia no fue destruida. La flota no tiene por que retirarse'	]! !!Guia methodsFor: 'acciones' stamp: 'Barbara 4/22/2011 06:33'!intentarChocar: algo42	"Recibe una nave Algo42 y la choca; Como consecuencia, la Algo42 pierde puntos 30 de su tanque de energia	Las guias son las unicas naves no operables que no resultan destruidas al ser chocadas."		(algo42 coincidePosicionCon: rectangulo) ifTrue:[			algo42 modificarEnergia: -30.			^true.].	^false.! !!Guia methodsFor: 'acciones' stamp: 'Barbara 4/21/2011 20:11'!mover	self subclassResponsibility .! !Guia subclass: #Guia1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Guia1 commentStamp: '<historical>' prior: 0!Nave guia muy simple. Ni siquiera tiene armas. Su movimiento consiste en ir hacia abajo, luego hacia arriba , y asi sucesivamente. Fue creada con el unico proposito de mostrar el funcionamiento de una nave guia y probarlo. Sera usada en las pruebas del nivel. Solo tiene 10 puntos de energia, asi que es facilmente eliminable.!]style[(326)f1!!Guia1 methodsFor: 'Acciones' stamp: 'Barbara 5/2/2011 21:34'!IntentarAccionSobre: algo42"Si la nave guia esta en la posicion de algo42 lo choca. Lanzaun laser y lo agrega a la lista de Armas."	|laser|	self intentarChocar:algo42.	laser:=self dispararLaser.	(plano listaArmas)  add: laser.! !!Guia1 methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 03:21'!dispararLaser"Crea una instancia de laser en la posicion actual de la nave"	| laser |	laser:= Laser LanzarLaserPosicionEnX: (self devolverPosicionX ) EnY: (self devolverPosicionY) OrigenAlgo42:  false EnPlano: plano.! !!Guia1 methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 08:33'!mover	"Movimiento de la clase guia1. Se mueve hacia abajo"	self determinarPosicionEnX: self devolverPosicionX  EnY:  (self devolverPosicionY )-1.	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Guia1 methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 08:33'!moverAlternativo"Movimiento que se debe llevar a cabo si la funcion intentar movimiento comprueba que el movimientopor defecto provocaria un choque entre naves del mismo tipo. Intenta moverse unaposicion hacia atras. Si no puede, se queda quieto."	|superposicion|	self determinarPosicionEnX: self devolverPosicionX  EnY:  (self devolverPosicionY )+1.	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Guia1 methodsFor: 'Inicializadores' stamp: 'Barbara 5/5/2011 21:22'!initialize 	puntos:=1002.	energia:=10.	rectangulo:= Rectangulo crearRectanguloAltura: 15 Ancho: 15.	operable:=false.	fueraDeJuego :=false.	destruida:=false.! !!Guia1 methodsFor: 'Privados' stamp: 'Barbara 4/21/2011 22:41'!recibirFlota: listaNaves"Recibe una lista de naves, las mismas seran la flota de la guia1"	flota:= listaNaves.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Guia1 class	instanceVariableNames: ''!!Guia1 class methodsFor: 'as yet unclassified' stamp: 'Barbara 5/1/2011 14:08'!crearGuia1ConFlota: listaNaves enPosicionX:x Y:y EnPlano:planoJuego	|guia1|	guia1:=Guia1 new.	guia1 determinarPlano: planoJuego.	planoJuego agregarNave: guia1.	guia1 determinarPosicionEnX: x EnY: y.	guia1 recibirFlota: listaNaves.	^guia1.! !NaveNoOperable subclass: #Helicoptero	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Helicoptero commentStamp: '<historical>' prior: 0!Los helicopteros no tienen armas, pero las naves algo42 pueden chocarse con ellos, y eso les hace perder 200 puntos.!]style[(116)f1!!Helicoptero methodsFor: 'Acciones' stamp: 'Barbara 5/2/2011 21:34'!IntentarAccionSobre: algo42"Si la nave esta en la posicion de algo42 lo choca."	self intentarChocar:algo42.! !!Helicoptero methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 08:33'!mover "El helicoptero se mueve hacia abajo."	self determinarPosicionEnX: self devolverPosicionX  EnY:  (self devolverPosicionY )-1.	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Helicoptero methodsFor: 'Acciones' stamp: 'Barbara 5/4/2011 08:33'!moverAlternativo"Movimiento que se debe llevar a cabo si la funcion intentar movimiento comprueba que el movimientopor defecto provocaria un choque entre naves del mismo tipo. Intenta moverse unaposicion hacia atras. ."	self determinarPosicionEnX: self devolverPosicionX  EnY:  (self devolverPosicionY )+1.	(self seSuperponeConOtraNave) ifTrue:[		SuperposicionNavesError new signal:'La posicion ya esta ocupada.'.		].	self estaFueraDeArea.! !!Helicoptero methodsFor: 'Inicializar' stamp: 'Barbara 5/2/2011 18:37'!initialize	"Inicializa una instancia de helicoptero"	puntos:=-200.	energia:=1.	rectangulo:= Rectangulo crearRectanguloAltura: 4 Ancho:4. 	destruida:=false.	operable:=false.	fueraDeJuego :=false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Helicoptero class	instanceVariableNames: ''!!Helicoptero class methodsFor: 'as yet unclassified' stamp: 'Barbara 5/2/2011 23:31'!crearHelicopteroPosicionEnX:x EnY:y EnPlano:planoJuego"Crea una instancia de helicoptero y la coloca en la posicion x, y"	|helicoptero|	helicoptero:= Helicoptero new.	helicoptero determinarPlano: planoJuego.	helicoptero determinarPosicionEnX: x EnY:y.	(helicoptero seSuperponeConOtraNave)ifTrue:[		^(SuperposicionNavesError new signal:'La posicion ya esta ocupada.')		].	planoJuego agregarNave: helicoptero.	^helicoptero.	! !Object subclass: #Plano	instanceVariableNames: 'dimensionX dimensionY listaArmas listaNaves listaItems listaItemsUsados listaArmasUsadas listaNavesDestruidas algo42 nivel'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Plano commentStamp: '<historical>' prior: 0!EscenaActual maneja la escenaActual del nivel, contiene listas con las naves, itemsy armas en juego y se encarga de operar sobre ellas e iterarlas.Instance Variables:	dimensionX	<Integer>	dimensionY	<Integer>	listaArmasNaves	<(Collection of: Arma) | MetacelloMemberListSpec>	listaArmasAlgo42	<(Collection of: Arma) | MetacelloMemberListSpec>	listaNaves	<Collection | MetacelloMemberListSpec>	listaItems	<(Collection of: Item) | MetacelloMemberListSpec>	algo42	<ProtoObject | PseudoContext>!!Plano methodsFor: 'acciones' stamp: 'Barbara 5/5/2011 21:07'!revisarEventos"En cada turno, se debe invocar este método para revisar las posiciones de las naves, las armas y los items, para ver si hay alguna acción que realizar. Devuelve la lista de naves que el algo42 elimino"		listaItems do: [:cadaItem|		cadaItem actuar.		].	listaArmas do: [:cadaArma|		cadaArma actuar.		].	listaNaves do: [: cadaNave|				cadaNave actuar.			].	"Eliminacion de naves, armas e items que ya no estan vigentes en el area de juego."	listaArmasUsadas do:[: armaEliminada|		listaArmas remove: armaEliminada.].	listaNavesDestruidas do: [: eliminada|		listaNaves remove: eliminada.].	listaItemsUsados do: [: usado|		listaItems remove: usado.].		nivel actuarCon: listaNavesDestruidas.! !!Plano methodsFor: 'inicializar' stamp: 'Barbara 5/5/2011 02:36'!initialize		listaArmas:=OrderedCollection new.	listaNaves:=OrderedCollection new.	listaItems:=OrderedCollection new.	listaNavesDestruidas :=OrderedCollection new.	listaItemsUsados:=OrderedCollection new.	listaArmasUsadas:=OrderedCollection new.	nivel:= Nivel new.! !!Plano methodsFor: 'privado' stamp: 'Barbara 5/1/2011 12:56'!determinarAncho:x Alto:y	"Determina el ancho y el alto del plano"	dimensionX:=x.	dimensionY:=y. ! !!Plano methodsFor: 'devolverInformacion' stamp: 'Barbara 5/1/2011 14:20'!algo42 "Devuelve una referencia al algo42 contenido en el plano"	^algo42 .! !!Plano methodsFor: 'devolverInformacion' stamp: 'Barbara 5/1/2011 13:44'!altura"Devuelve la posicion del plano"	^dimensionY.! !!Plano methodsFor: 'devolverInformacion' stamp: 'Barbara 5/1/2011 13:44'!ancho"Devuelve la posicion del plano"	^dimensionX.! !!Plano methodsFor: 'devolverInformacion' stamp: 'Barbara 5/5/2011 03:48'!devolverNivel	^(nivel devolverNumeroNivel) .! !!Plano methodsFor: 'devolverInformacion' stamp: 'Barbara 5/1/2011 15:09'!listaArmas"Devuelve una lista con las municiones en juego"	^listaArmas.! !!Plano methodsFor: 'devolverInformacion' stamp: 'Barbara 5/1/2011 14:43'!listaNaves"Devuelve una lista con las naves no operables del juego"	^listaNaves.! !!Plano methodsFor: 'devolverInformacion' stamp: 'Barbara 5/5/2011 01:34'!listaNavesEliminadas"Devuelve una lista con las naves eliminadas del juego"	^listaNavesDestruidas .! !!Plano methodsFor: 'agregarObjetos' stamp: 'Barbara 5/5/2011 02:02'!agregarArma: arma"Agrega una municion al plano."	(arma estadoUsado)ifTrue:[		ArmaUsadaError new signal: 'Esta municion ya fue usada'			].	listaArmas  add: arma.! !!Plano methodsFor: 'agregarObjetos' stamp: 'Barbara 5/5/2011 02:58'!agregarArmaUsada: arma"Agrega un arma a la lista de armas usadas"	(arma estadoUsado)ifFalse:[		ArmaNoUsadaError new signal: 'Esta municion no fue usada'			].	listaArmasUsadas  add: arma.! !!Plano methodsFor: 'agregarObjetos' stamp: 'Barbara 5/5/2011 02:00'!agregarItem: item"Agrega un item al area de juego."	(item usado)ifTrue:[		ItemUsadoError new signal: 'Este item ya fue usado'			].	listaItems add:item.! !!Plano methodsFor: 'agregarObjetos' stamp: 'Barbara 5/5/2011 02:00'!agregarItemUsado: item"Agrega un item del juego a la lista de items usados."	(item usado)ifFalse:[		ItemNoUsadoError new signal: 'Este item aun no ha sido utilizado'			].	listaItemsUsados add:item.! !!Plano methodsFor: 'agregarObjetos' stamp: 'Barbara 5/5/2011 02:12'!agregarNave: nave"Agrega una nave no operable a la lista de naves"	(nave estadoActualDestruida )ifTrue:[		NaveDestruidaError new signal: 'La nave esta destruida'			].	listaNaves add:nave.! !!Plano methodsFor: 'agregarObjetos' stamp: 'Barbara 5/5/2011 02:17'!agregarNaveEliminada: nave"Agrega una nave no operable a la lista de naves destruidas"	(nave estadoActualDestruida )ifFalse:[		NaveNoDestruidaError new signal: 'La nave aun no esta destruida'			].	listaNavesDestruidas  add:nave.! !!Plano methodsFor: 'agregarObjetos' stamp: 'Barbara 5/1/2011 14:15'!introducirAlgo:  algo"Introduce un algo42 al plano"	algo42 :=algo.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Plano class	instanceVariableNames: ''!!Plano class methodsFor: 'Inicializar' stamp: 'Barbara 5/5/2011 03:48'!crearPlanoAltura:x Ancho:y"Crea una instancia de plano con la altura y el ancho indicados; Inicializa listas para colocar las naves en juego,las municiones, items, objetos a eliminar, etc."	|plano|	plano:= Plano new.	plano determinarAncho: x Alto: y.		^plano.	! !Object subclass: #Rectangulo	instanceVariableNames: 'ancho altura posicionX posicionY'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!Rectangulo commentStamp: '<historical>' prior: 0!Clase rectangulo que sirve para modelar y representar todos los objetos ubicables en el plano.Instance Variables:	ancho	<ProtoObject | PseudoContext>	altura	<ProtoObject | PseudoContext>	posicionX	<ProtoObject | PseudoContext>	posicionY	<ProtoObject | PseudoContext>!]style[(272)f1!!Rectangulo methodsFor: 'modificacionDevolucionDatos' stamp: 'Barbara 4/18/2011 02:57'!determinarUbicacionEnX: x EnY: y	"Cambia los atributos que determinan las posiciones del rectangulo en el espacio"	posicionX:=x.	posicionY:=y.! !!Rectangulo methodsFor: 'modificacionDevolucionDatos' stamp: 'Barbara 4/17/2011 13:34'!devolverPosicionX	"Devuelve la posicion en X del rectangulo"	^posicionX.! !!Rectangulo methodsFor: 'modificacionDevolucionDatos' stamp: 'Barbara 4/17/2011 13:34'!devolverPosicionY	"Devuelve la posicion en Y del rectangulo"	^posicionY.! !!Rectangulo methodsFor: 'modificacionDevolucionDatos' stamp: 'Barbara 4/20/2011 10:49'!inicializarAltura: y Ancho:  x	"Inicializa un rectangulo con ancho x y altura y."	ancho:=x.	altura:=y.! !!Rectangulo methodsFor: 'comparacion' stamp: 'Barbara 4/22/2011 02:48'!coincideConPosicionDe: otroRectangulo	"Recibe otro rectangulo y devuelve true si cuentan con algun punto en comun en el espacio."	|otroXComienzo otroXFinal XComienzo XFinal otroYComienzo otroYFinal YComienzo YFinal|	otroXComienzo :=otroRectangulo devolverPosicionX.	otroXFinal:= otroXComienzo+(otroRectangulo devolverAncho).	XComienzo :=posicionX.	XFinal:= XComienzo+ancho.		(XComienzo<=otroXComienzo)ifTrue:[		(otroXComienzo<=XFinal) ifFalse:[^false].		].		(XComienzo>=otroXComienzo)ifTrue:[		(XComienzo<=otroXFinal) ifFalse:[^false].		].		otroYComienzo :=otroRectangulo devolverPosicionY.	otroYFinal:= otroYComienzo+(otroRectangulo devolverAltura).	YComienzo :=posicionY.	YFinal:= YComienzo+altura.		(YComienzo<=otroYComienzo)ifTrue:[		(otroYComienzo<=YFinal) ifFalse:[^false].		].		(YComienzo>=otroYComienzo)ifTrue:[		(YComienzo<=otroYFinal) ifFalse:[^false].		].		^true.! !!Rectangulo methodsFor: 'privados' stamp: 'Barbara 4/17/2011 13:33'!devolverAltura	"Devuelve la altura del rectangulo"	^altura.! !!Rectangulo methodsFor: 'privados' stamp: 'Barbara 4/17/2011 13:33'!devolverAncho	"Devuelve el ancho del rectangulo"	^ancho.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rectangulo class	instanceVariableNames: ''!!Rectangulo class methodsFor: 'as yet unclassified' stamp: 'Barbara 5/3/2011 00:00'!crearRectanguloAltura:y Ancho:x"Crea una instancia de rectangulo con las caracteristicas especificadas."	|rectangulo|	rectangulo:= Rectangulo new.	rectangulo inicializarAltura:y Ancho:x.	^rectangulo.! !Item subclass: #TanqueEnergia	instanceVariableNames: 'aumentoEnergia'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!TanqueEnergia commentStamp: '<historical>' prior: 0!Si una instancia de algo42 usa una instancia de este tanque de energia, eleva la energia en su tanque en 40 puntos.Instance Variables:	aumentoEnergia	<Integer>!!TanqueEnergia methodsFor: 'Acciones' stamp: 'Barbara 4/22/2011 11:05'!intentarEfectoEn: algo42	"Recibe una nave tipo Algo42; y le suma energia a su tanque"		((algo42 coincidePosicionCon: (rectangulo)) & (usado=false)) ifTrue:[			algo42 modificarEnergia: aumentoEnergia.			usado:=true.		].	! !!TanqueEnergia methodsFor: 'inicializar' stamp: 'Barbara 5/2/2011 23:58'!initialize"Inicializa un item"	usado:=false.	rectangulo:= Rectangulo crearRectanguloAltura: 4 Ancho: 3.	aumentoEnergia:=40.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TanqueEnergia class	instanceVariableNames: ''!!TanqueEnergia class methodsFor: 'as yet unclassified' stamp: 'Barbara 4/22/2011 11:13'!crearTanquePosicionEnX:x EnY:y"Crea una instancia detanque y la coloca en la posicion x, y"	|tanque|	tanque:= TanqueEnergia  new.	tanque determinarPosicionEnX: x EnY:y.	^tanque.! !Arma subclass: #TorpedoRastreador	instanceVariableNames: 'naveRastreada'	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!TorpedoRastreador commentStamp: '<historical>' prior: 0!El torpedo rastreador es un arma que causa un danio de 20 puntos.Ademas cuenta con la particularidad de moverse de una forma especial:Persigue a la nave que rastrea, por lo cual cada vez que usa su metodo movimientose acerca mas a su objetivo.Instance Variables:	naveRastreada	<ObjetoUbicable | Rectangulo>!!TorpedoRastreador methodsFor: 'Acciones' stamp: 'Barbara 4/17/2011 19:06'!determinarNaveRastrada: nave	"Guarda la nave a la cual rasteara el torpedo. 	Cuando se utilice el metodo mover, el torpedo se movera hacia esa nave"	naveRastreada :=nave.! !!TorpedoRastreador methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 00:59'!mover"El torpedo rastreador se mueve de tal forma que se acerque a la nave que persigue"	(naveRastreada devolverPosicionX<self devolverPosicionX)ifTrue: [				((naveRastreada devolverPosicionY = self devolverPosicionY ) ) ifTrue:[  						self determinarPosicionEnX: self devolverPosicionX - 1 EnY:  self devolverPosicionY .		].				((naveRastreada devolverPosicionY < self devolverPosicionY ) ) ifTrue:[  						self determinarPosicionEnX: self devolverPosicionX - 1 EnY:  self devolverPosicionY - 1.						]ifFalse:[			(naveRastreada devolverPosicionY > self devolverPosicionY ) ifTrue:[					self determinarPosicionEnX: self devolverPosicionX - 1 EnY:  self devolverPosicionY + 1]		].	]	ifFalse:[			(naveRastreada devolverPosicionX=self devolverPosicionX)ifTrue: [								(naveRastreada devolverPosicionY < self devolverPosicionY )ifTrue:[					self determinarPosicionEnX: self devolverPosicionX EnY:  self devolverPosicionY + 1.				]				ifFalse:[									(naveRastreada devolverPosicionY=self devolverPosicionY)ifTrue: [																					self determinarPosicionEnX: self devolverPosicionX  EnY:  self devolverPosicionY +1].								].								(naveRastreada devolverPosicionY > self devolverPosicionY ) ifTrue:[									self determinarPosicionEnX: self devolverPosicionX  EnY:  self devolverPosicionY +1].				].				(naveRastreada devolverPosicionY = self devolverPosicionY ) ifTrue:[									self determinarPosicionEnX: self devolverPosicionX +1 EnY:  self devolverPosicionY].				].				(naveRastreada devolverPosicionY < self devolverPosicionY )ifTrue:[							self determinarPosicionEnX: self devolverPosicionX + 1 EnY:  self devolverPosicionY - 1.				]				ifFalse:[									(naveRastreada devolverPosicionY > self devolverPosicionY ) ifTrue:[									self determinarPosicionEnX: self devolverPosicionX + 1 EnY:  self devolverPosicionY +1].				]. ! !!TorpedoRastreador methodsFor: 'Inicializadores' stamp: 'Barbara 5/2/2011 23:59'!initialize"Inicializa una nueva instancia de Torpedo"	usada:=false.	danio:= -20.	rectangulo:= Rectangulo crearRectanguloAltura: 2 Ancho: 2.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TorpedoRastreador class	instanceVariableNames: ''!!TorpedoRastreador class methodsFor: 'as yet unclassified' stamp: 'Barbara 5/1/2011 14:31'!lanzarTorpedoRastreadorPosicionEnX:x EnY:y OrigenAlgo:vOf EnPlano: planoJuego"Crea una instancia de torpedo rastreador y la coloca en la posicion x, y"	|torpedo|	torpedo:=TorpedoRastreador  new.	torpedo InicializarOrigenAlgo42: vOf.	torpedo determinarPlano: planoJuego.	planoJuego agregarArma: torpedo.	torpedo determinarPosicionEnX: x EnY:y.	^torpedo.! !Arma subclass: #TorpedoSimple	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Juego'!!TorpedoSimple commentStamp: '<historical>' prior: 0!El torpedo simple es un arma que causa un danio de 20 puntos.!!TorpedoSimple methodsFor: 'Inicializadores' stamp: 'Barbara 5/2/2011 23:59'!initialize "Inicializa una nueva instancia de Torpedo"	usada:=false.	danio:= -20.	rectangulo:= Rectangulo crearRectanguloAltura: 3 Ancho: 3.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TorpedoSimple class	instanceVariableNames: ''!!TorpedoSimple class methodsFor: 'as yet unclassified' stamp: 'Barbara 5/1/2011 14:32'!lanzarTorpedoSimplePosicionEnX:x EnY:y EnPlano: planoJuego"Crea una instancia de laser y la coloca en la posicion x, y"	|torpedo|	torpedo:=TorpedoSimple new.	torpedo determinarPlano: planoJuego.	planoJuego agregarArma: torpedo.	torpedo InicializarOrigenAlgo42: false.	torpedo determinarPosicionEnX: x EnY:y.	^torpedo.! !