TestCase subclass: #PruebaAlgo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaAlgo commentStamp: '<historical>' prior: 0!Prueba los metodos de la clase Algo42.!]style[(38)f1!!PruebaAlgo methodsFor: 'PruebasDeMovimiento' stamp: 'Barbara 5/2/2011 18:26'!testMoverAlgo	"Pruebas destinadas a probar los metodos de movimiento del Algo42: Mover arriba, abajo, izquierda, derecha."	|algo plano|		"Necesito una instancia de plano, ya que un algo42 es una instancia de ObjetoUbicable."	plano:=Plano crearPlanoAltura:100 Ancho:100.		"Creo y ubico la nave de tipo Algo42 en la posicion 0,0"	algo:= Algo42 crearAlgo42PosicionX:0 Y:0 EnPlano:plano.	algo moverArriba.	"Subi la nave una posicion, su posicion en Y ahora deberia ser 1"	self should: (algo devolverPosicionY==1).	"Subo la nave dos veces mas y luego la bajo una vez para verificar que baja bien"	algo moverArriba.	algo moverArriba.	algo moverAbajo.	self should: (algo devolverPosicionY=2).	"Ahora comienzo a mover la nave hacia los lados."	algo moverDerecha.	self should: (algo devolverPosicionX=1).	algo moverIzquierda.	self should: (algo devolverPosicionX=0).	! !!PruebaAlgo methodsFor: 'PruebasDeMovimiento' stamp: 'Barbara 5/2/2011 18:29'!testMovimientoInvalidoAlgo	"Prueba que el algo42 no pueda moverse a zonas invalidas."	|algo plano|		"Necesito una instancia de plano, ya que un algo42 es una instancia de ObjetoUbicable."	plano:=Plano crearPlanoAltura:100 Ancho:100.	"Creo la nave en la posicion 0,96"	algo:=Algo42 crearAlgo42PosicionX: 0 Y:  96 EnPlano: plano.		"Intentar mover la nave hacia arriba deberia devolver un error del tipo AreaInvalida"	self should: [algo moverArriba] raise: AreaInvalidaError.	"Muestro como podria capturar el error del tipo AreaInvalida: simplemente no muevo la nave."	[algo moverArriba] ifError: [		algo determinarPosicionEnX:0EnY:96.		].	self should: ((algo devolverPosicionY)=96).	"Intentar mover la nave hacia  la izquierda también deberia devolver un error del tipo AreaInvalida"	self should: [algo moverIzquierda] raise: AreaInvalidaError.! !!PruebaAlgo methodsFor: 'PruebasArmas' stamp: 'Barbara 5/2/2011 19:33'!testLanzamientoCohete	"Prueba el lanzamiento de cohetes"	|  cohete  algo plano |	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	algo:=Algo42 crearAlgo42PosicionX: 5 Y: 3 EnPlano: plano. 	"Lanzar un cohete deberia levantar error porque un algo42, por defecto, no tiene ni cohetes ni torpedos."	self should: [cohete:= algo dispararCohete] raise: ArmaNoDisponibleError.	"Le doy cohetes."	algo aumentarTorpedos: 0 Cohetes: 1.	"Ahora si deberia poder disparar."	cohete:= algo dispararCohete .	self should:((cohete  devolverPosicionY=3) & (cohete devolverPosicionX=5)).	! !!PruebaAlgo methodsFor: 'PruebasArmas' stamp: 'Barbara 5/2/2011 19:32'!testLanzamientoLaser	"Prueba el lanzamiento de armas laser"	| laser algo plano|	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	algo:=Algo42 crearAlgo42PosicionX: 5 Y: 3 EnPlano: plano. 		"La responsabilidad del algo es crear un laser y ubicarlo, por lo tanto, solo eso voy a probar en esta prueba unitaria."	laser:=algo dispararLaser.	self should: ((laser devolverPosicionY=3) & (laser devolverPosicionX=5)).! !!PruebaAlgo methodsFor: 'PruebasArmas' stamp: 'Barbara 5/2/2011 19:34'!testLanzamientoTorpedo	"Prueba que el algo puede disparar sus torpedos apropiadamente"	|  torpedo algo plano avioneta|	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	algo:=Algo42 crearAlgo42PosicionX: 5 Y: 3 EnPlano: plano. 	"Pruebas de lanzamiento de torpedos. Para probarlos, necesito un objetivo."	avioneta:=Avioneta crearAvionetaPosicionEnX: 70 EnY: 70 EnPlano: plano.		"Lanzar un torpedo deberia levantar error porque un algo42, por defecto, no tiene ni cohetes ni torpedos."	self should: [torpedo:= algo dispararTorpedoHacia:avioneta] raise: ArmaNoDisponibleError.	"Le doy armas."	algo aumentarTorpedos: 1 Cohetes: 1.	self should: [torpedo:= algo dispararTorpedoHacia:algo] raise: NaveARastrearError .		"Ahora si, uso la avioneta para probar el torpedo."	torpedo:= algo dispararTorpedoHacia: avioneta.	self should:((torpedo devolverPosicionY=3) & (torpedo devolverPosicionX=5)).! !!PruebaAlgo methodsFor: 'PruebasConstructor' stamp: 'Barbara 5/2/2011 20:45'!testImpedirPosicionInicialInvalida"Se asegura de que levanta error al intentar crear naves tipo algo42 fuera del area de juego"	|algo plano|		plano:= Plano crearPlanoAltura: 50 Ancho: 50.		self should: [		algo:= Algo42 crearAlgo42PosicionX: -1 Y: 5  EnPlano: plano.		] raise: AreaInvalidaError .		self should: [		algo:= Algo42 crearAlgo42PosicionX: 1 Y: -50  EnPlano: plano.		] raise: AreaInvalidaError .		self should: [		algo:= Algo42 crearAlgo42PosicionX: 6 Y: 500  EnPlano: plano.		] raise: AreaInvalidaError .		self should: [		algo:= Algo42 crearAlgo42PosicionX: 101 Y: 3  EnPlano: plano.		] raise: AreaInvalidaError .! !TestCase subclass: #PruebaArma	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaArma commentStamp: '<historical>' prior: 0!Arma es una clase abstracta y por lo tanto, no puede ser instanciada. Aun asi, cuenta con metodos que sus hijos podran heredar. Se probaran los metodos intentarMovimiento e interntarAtacar. Muchas armas solamente varian su comportamiento en funcion de su estado; por lo tanto, sus metodos seran probados solo aqui. Como Arma no puede tener instancias, sus metodos seran probados con instancias de laser, las cuales no redefinen ninguno de los metodos mencionados.!]style[(463)f1!!PruebaArma methodsFor: 'Movimiento' stamp: 'Barbara 5/4/2011 13:02'!testMovimiento"Prueba el movimiento de un arma"	|plano laser posicion|	plano:= Plano crearPlanoAltura: 100 Ancho: 100.	laser:= Laser LanzarLaserPosicionEnX:50 EnY:90 OrigenAlgo42:false EnPlano:plano.		posicion:= 90.		30 timesRepeat: [		laser intentarMovimiento.		posicion:=posicion-2.		self should:[			(laser devolverPosicionX) =50.							].		self should:[			(laser devolverPosicionY )=posicion.			].		].! !!PruebaArma methodsFor: 'Movimiento' stamp: 'Barbara 5/4/2011 12:58'!testMovimientoFueraDeArea"Prueba que un arma, al salir del plano, pasa su estado a usado."	|plano laser|	plano:= Plano crearPlanoAltura: 100 Ancho: 100.	laser:= Laser LanzarLaserPosicionEnX:50 EnY:10 OrigenAlgo42:false EnPlano:plano.		10 timesRepeat: [laser intentarMovimiento ].		self should:[(laser estadoUsado)=true]! !!PruebaArma methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 01:08'!testAtaqueInvalidoArmaAlgo42"Prueba que un arma que reconoce que su origen es una algo42, no puede atacar a una navede tipo algo42"	|cohete plano algo|		plano:= Plano crearPlanoAltura: 100 Ancho: 100.			algo:= Algo42 crearAlgo42PosicionX: 50 Y: 50  EnPlano:plano. 		cohete:= Cohete LanzarCohetePosicionEnX: 50 EnY: 50 OrigenAlgo42: true EnPlano: plano.	self should: [cohete intentarAtacar: algo] raise: AlgoSeAtacaASiMismoError .! !!PruebaArma methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 01:06'!testAtaqueInvalidoArmaNaveNoOperable"Prueba que un arma que reconoce que su origen no es una algo42, no puede atacar a una navede tipo no operable (en este caso, una nave civil)"	|civil cohete plano|		plano:= Plano crearPlanoAltura: 100 Ancho: 100.	cohete:= Cohete LanzarCohetePosicionEnX: 70 EnY: 70 OrigenAlgo42: false EnPlano: plano.	civil:= Civil crearCivilPosicionEnX: 70 EnY: 70 EnPlano: plano.		self should: [cohete intentarAtacar: civil] raise: AtaqueEntreNavesNoOperables.! !TestCase subclass: #PruebaAvioneta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaAvioneta methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/4/2011 09:21'!testMoverAvioneta"Creara una instancia de avioneta, la hara bajar 60 pasos asegurandose de que la posicionen cada punto sea la correcta, y luego se movera una vez mas para corroborar que el movimientohacia arriba se lleve a cabo."	|avioneta n posY plano|		plano:=Plano crearPlanoAltura:100 Ancho:100.	avioneta:=Avioneta crearAvionetaPosicionEnX: 50 EnY: 95 EnPlano:plano.		n:=0.	posY:=95.	[n<31]whileTrue: [		n:=n+1.		avioneta mover.		posY:=posY-2.		self should: ((avioneta devolverPosicionY)=posY).		].	avioneta mover.	posY:=posY+2.	self should: ((avioneta devolverPosicionY)=posY).! !!PruebaAvioneta methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/4/2011 10:25'!testMoverAvionetaAlternativo"Prueba el movimiento alternativo de la avioneta"	|avioneta n posY plano|		plano:=Plano crearPlanoAltura:100 Ancho:100.	avioneta:=Avioneta crearAvionetaPosicionEnX: 50 EnY: 95 EnPlano:plano.		n:=0.	posY:=95.	[n<10]whileTrue: [   "Bajo a la avioneta 20 lugares"		n:=n+1.		avioneta mover.		posY:=posY-2.		self should: ((avioneta devolverPosicionY)=posY).		].	self should: ((avioneta devolverPosicionY)=75).	avioneta moverAlternativo. "Deberia haber subido dos posiciones"	self should: ((avioneta devolverPosicionY)=77).	"Pero al llamar a mover, deberia bajar de nuevo."	avioneta mover.	self should: ((avioneta devolverPosicionY)=75).	posY:=75.	30 timesRepeat: [		avioneta mover.		posY:=posY-2.		self should: (avioneta devolverPosicionY)=posY.		].	self should:(posY=15).	"Ahora deberia empezar a subir al llamar a mover"	avioneta mover.	posY:=avioneta devolverPosicionY.	self should:(posY=17).	avioneta moverAlternativo .	posY:=avioneta devolverPosicionY.	self should:(posY=15). "Ahora el mover alternativo deberia ir hacia atras."! !!PruebaAvioneta methodsFor: 'PruebasArmas' stamp: 'Barbara 5/2/2011 20:14'!testLanzamientoLaser	"Prueba el lanzamiento de armas laser"	| laser avioneta plano|	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	avioneta:=Avioneta crearAvionetaPosicionEnX: 20 EnY: 25  EnPlano: plano. 		"La responsabilidad de la avioneta es crear un laser y ubicarlo, por lo tanto, solo eso voy a probar en esta prueba unitaria."	laser:=avioneta dispararLaser.	self should: ((laser devolverPosicionY=25) & (laser devolverPosicionX=20)).! !TestCase subclass: #PruebaBombardero	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaBombardero methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/4/2011 10:40'!testMoverAlternativo"Prueba que al llamar al metodo moverAlternativo, cambia su posicion a la opuesta."	|bombardero n plano|	plano:=Plano crearPlanoAltura:100 Ancho:100.	bombardero := Bombardero crearBombarderoPosicionEnX: 15 EnY:92EnPlano:plano. 	bombardero mover.	self should:( (bombardero devolverPosicionX )= 15.5).	self should:( (bombardero devolverPosicionY)= 91.5).	"Al bombardero lo acabo de crear, por lo cual moverAlternativo deberia moverlo a la izquierda	(Recordar que un bombardero comienza moviendose a la derecha y luego a la izquierda.)"	bombardero moverAlternativo .	self should:( (bombardero devolverPosicionX )= 15).	self should:( (bombardero devolverPosicionY)= 91).	"Ahora el bombardero sigue si movimiento normalmente pero hacia la izquierda."	bombardero mover.	self should:( (bombardero devolverPosicionX )= 14.5).	self should:( (bombardero devolverPosicionY)= 90.5).	"Como se esta moviendo a la izquierda, mover alternativo deberia moverlo a la derecha"	bombardero moverAlternativo .	self should:( (bombardero devolverPosicionX )= 15).	self should:( (bombardero devolverPosicionY)= 90).! !!PruebaBombardero methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/2/2011 20:02'!testMoverBombardero"Crea una instancia de bombardero y prueba su movimiento"	|bombardero n plano|	plano:=Plano crearPlanoAltura:100 Ancho:100.	bombardero := Bombardero crearBombarderoPosicionEnX: 5 EnY:92EnPlano:plano. 	bombardero mover.	self should:( (bombardero devolverPosicionX )= 5.5).	self should:( (bombardero devolverPosicionY)= 91.5).	"Lo muevo 19 veces mas para que empiece el movimiento en zig zag hacia la izquierda"	n:=0.	[n<19]whileTrue:[		n:=n+1.		bombardero mover.	].	self should:((bombardero devolverPosicionX)= 15.0).	self should:( (bombardero devolverPosicionY)=82.0).	bombardero mover.	"Pruebo que siga bajando pero moviendose a la izquierda"	self should:((bombardero devolverPosicionX)= 14.5).	self should:( (bombardero devolverPosicionY)=81.5).! !!PruebaBombardero methodsFor: 'PruebasArmas' stamp: 'Barbara 5/2/2011 21:06'!testLanzamientoLaser	"Prueba el lanzamiento de armas laser"	| laser nave plano|	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	nave:= Bombardero crearBombarderoPosicionEnX: 50 EnY: 20 EnPlano: plano. 		"La responsabilidad del bombardero es crear un laser y ubicarlo, por lo tanto, solo eso voy a probar en esta prueba unitaria."	laser:=nave dispararLaser.	self should: ((laser devolverPosicionY=20) & (laser devolverPosicionX=50)).! !!PruebaBombardero methodsFor: 'PruebasItems' stamp: 'Barbara 5/2/2011 21:18'!testDejarArmas"Prueba que un bombardero no puede dejar armas hasta que este eliminado,cuando esta eliminado, prueba que las coloca en la posicion correcta."	|item bombardero plano|		plano:= Plano crearPlanoAltura: 100 Ancho: 100.	bombardero := Bombardero crearBombarderoPosicionEnX: 80 EnY: 80 EnPlano: plano.		"Un bombardero es inicializado con 50 puntos de energia. Hasta que no sean iguales o menores que cero,	no puede dejar un item."	self should:[bombardero dejarArma]raise:ItemNoDisponibleError.		"Modifico su energia y ahora si deberia crearlo, y en la posicion del bombardero."		bombardero modificarEnergia: -50.	item:= bombardero dejarArma.		self should: [((item devolverPosicionY =80) & (item devolverPosicionX = 80 ) ) ].	! !!PruebaBombardero methodsFor: 'PruebasItems' stamp: 'Barbara 5/2/2011 21:08'!testLanzamientoCohete	"Prueba el lanzamiento de cohetes"	|  cohete bombardero plano |	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	bombardero:=Bombardero  crearBombarderoPosicionEnX: 5 EnY: 3 EnPlano: plano. 	cohete:= bombardero dispararCohete .	self should:((cohete  devolverPosicionY=3) & (cohete devolverPosicionX=5)).	! !!PruebaBombardero methodsFor: 'PruebasItems' stamp: 'Barbara 5/2/2011 21:13'!testLanzamientoTorpedo	"Prueba que el bombardero pueda disparar sus torpedos apropiadamente"	|  bombardero algo plano torpedo|	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	bombardero :=Bombardero crearBombarderoPosicionEnX: 80 EnY: 80 EnPlano: plano. 	"Pruebas de lanzamiento de torpedos. Para probarlos, necesito un objetivo."	algo:=Algo42 crearAlgo42PosicionX: 20 Y:  20 EnPlano: plano.		torpedo:= bombardero dispararTorpedoHacia: algo.	self should:((torpedo devolverPosicionY=80) & (torpedo devolverPosicionX=80)).! !TestCase subclass: #PruebaCivil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaCivil methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/4/2011 09:01'!testMoverAlternativo"Pruebo que al llamar a la funcion mover alternativo, realice el movimiento esperado en las naves civiles,es decir, el movimiento hacia atras"	|avion plano pos|	pos:=35.	plano:=Plano crearPlanoAltura:100 Ancho:100.	avion:= Civil crearCivilPosicionEnX: 70 EnY:35 EnPlano: plano.	20 timesRepeat: [				self should: ((avion devolverPosicionY) = pos).			avion moverAlternativo .			pos:=pos+1.			].	! !!PruebaCivil methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/2/2011 20:12'!testMoverAvionCivil"Prueba los movimientos de las naves civiles"	|avion plano pos|	pos:=95.	plano:=Plano crearPlanoAltura:100 Ancho:100.	avion:= Civil crearCivilPosicionEnX: 70 EnY:95 EnPlano: plano.	20 timesRepeat: [				self should: (avion devolverPosicionY = pos).			avion mover.			pos:=pos-1			].	! !TestCase subclass: #PruebaExplorador	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaExplorador methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/4/2011 12:31'!testMoverAlternativo "Prueba el movimiento alternativo de una nave exploradora.El mover alternativo basicamente hace el mismo giro en posicion contraria.Por lo tanto, estas pruebas haran el giro alternativo desde el principio. Dara media vuelta de helice hacia atras."	|explorador plano n pos|		plano:= Plano crearPlanoAltura: 200 Ancho: 100.	explorador:= Explorador crearExploradorPosicionX: 50 Y: 70  RadioDeGiro: 35 EnPlano: plano.	n:=0.	[n<6]whileTrue:[		explorador moverAlternativo.		n:=n+1.		].	self should:[(explorador devolverPosicionX)asInteger = 15].	self should:[(explorador devolverPosicionY)asInteger = 108 ]! !!PruebaExplorador methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/4/2011 12:36'!testMoverExplorador	"El explorador se mueve en forma de helice, intentado recorrer toda el area del juego:	Por lo tanto, para adaptarse al area de juego de 100x100, sera inicializado con radio=35;	De esta manera cubrira casi todo el area en sus giros. Su movimiento	no es puramente circular: Es como una helice. Cada vez que gira, tambien avanza 0.5 hacia abajo	en Y- Segun esto, al completar media vuelta -es decir, 1/2 pi- habra avanzado 6 veces; ya	que en cada paso, baja 1/12, habra bajado 6/12=1/2. Como ademas baja 0.5 en Y cada vez,	estara en Y= 62 (100-35-3), y 15 (50-35) en X"	|explorador n plano|		"Creo y ubico la nave en la posicion 50,100"	plano:=Plano crearPlanoAltura:100 Ancho:100.	explorador:= Explorador crearExploradorPosicionX: 50 Y: 100 RadioDeGiro: 35 EnPlano:plano. 	n:=0.	[n<6]whileTrue:[		explorador mover.		n:=n+1.		].	self should:[(explorador  devolverPosicionY)asInteger=62].	self should:[(explorador devolverPosicionX)asInteger = 15].! !TestCase subclass: #PruebaFlotaCazasYCazas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaFlotaCazasYCazas methodsFor: 'PruebasMovimientosFlotas' stamp: 'Barbara 5/4/2011 09:07'!testMovimientoFlotaCazas"Prueba el movimiento de los cazas en conjunto, creando una nueva flota de cazas."	|flota listaNaves n m plano|	plano:= Plano crearPlanoAltura: 100 Ancho: 100.	flota:= FlotaCazas crearFlotaCentradaEnPosicionX:50 PosicionY:90 enPlano:plano.	(flota devolverNaveLider devolverPosicionX) =50.	(flota devolverNaveLider devolverPosicionY)=90.	n:=0.	[n<3]whileTrue:[		(flota devolverNaveLider )mover.		n:=n+1.		].	flota PosicionarYUbicarNuevoCaza.	"Se movio tres veces, por lo tanto  otras 2 naves ya debieron haber aparecido en Y=0,	y 5 lugares a los lados del caza lider"	listaNaves:=flota devolverListaCazas .	self should: ((listaNaves at:2) devolverPosicionY)=90.	self should: ((listaNaves at:2) devolverPosicionX)=45.	self should: ((listaNaves at:3) devolverPosicionX)=55.	self should: ((listaNaves at:3) devolverPosicionY)=90.	n:=0.	m:=0.	[n<4]whileTrue:[		n:=n+1.		[m<3]whileTrue:[			m:=m+1.			(listaNaves at:m) mover].		m:=0.	].	flota PosicionarYUbicarNuevoCaza.	"Se movio tres veces, por lo tanto  otras 2 naves ya debieron haber aparecido en Y=99,	y 10 lugares a los lados del caza lider"	self should: ((listaNaves at:5) devolverPosicionX)=40.	self should: ((listaNaves at:5) devolverPosicionY)=90.	self should: ((listaNaves at:4) devolverPosicionX)=60.	self should: ((listaNaves at:4) devolverPosicionY)=90.! !!PruebaFlotaCazasYCazas methodsFor: 'PruebasCazasIndividuales' stamp: 'Barbara 5/5/2011 01:52'!testDejarArmas"Prueba que un caza no puede dejar un tanque de energia,cuando esta eliminado, prueba que las coloca en la posicion correcta."	|item caza plano|		plano:= Plano crearPlanoAltura: 100 Ancho: 100.	caza := Caza crearCazaPosicionEnX: 50 EnY: 50 EnPlano: plano.		"Un caza es inicializado con 10 puntos de energia. Hasta que no sean iguales o menores que cero,	no puede dejar un item."	self should:[caza dejarTanque ]raise:ItemNoDisponibleError.		"Modifico su energia y ahora si deberia crearlo, y en la posicion del caza"		caza modificarEnergia: -10.	item:= caza dejarTanque .		self should: [((item devolverPosicionY =50) & (item devolverPosicionX = 50 ) ) ].! !!PruebaFlotaCazasYCazas methodsFor: 'PruebasCazasIndividuales' stamp: 'Barbara 5/2/2011 21:21'!testDejarTanque"Prueba que un caza no puede dejar armas hasta que este eliminado,cuando esta eliminado, prueba que las coloca en la posicion correcta."	|item caza plano|		plano:= Plano crearPlanoAltura: 100 Ancho: 100.	caza:= Caza crearCazaPosicionEnX: 40 EnY: 40 EnPlano: plano.		"Un caza es inicializado con 10 puntos de energia. Hasta que no sean iguales o menores que cero,	no puede dejar un item."	self should:[caza dejarTanque]raise:ItemNoDisponibleError.		"Modifico su energia y ahora si deberia crear una instancia de item, y en la posicion de la nave."		caza modificarEnergia: -10.	item:= caza dejarTanque .		self should: [((item devolverPosicionY =40) & (item devolverPosicionX = 40 ) ) ].	! !!PruebaFlotaCazasYCazas methodsFor: 'PruebasCazasIndividuales' stamp: 'Barbara 5/2/2011 21:17'!testLanzamientoTorpedo 	"Prueba el lanzamiento de torpedos simples"	| torpedo caza plano|	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	caza:= Caza crearCazaPosicionEnX: 90 EnY: 90  EnPlano: plano.		"La responsabilidad del caza es crear un laser y ubicarlo, por lo tanto, solo eso voy a probar en esta prueba unitaria."	torpedo:=caza  dispararTorpedo.	self should: ((torpedo devolverPosicionY=90) & (torpedo devolverPosicionX=90)).! !!PruebaFlotaCazasYCazas methodsFor: 'PruebasCazasIndividuales' stamp: 'Barbara 5/4/2011 09:07'!testMoverCaza"Prueba los movimientos de los cazas"	|caza plano pos|	pos:=75.	plano:=Plano crearPlanoAltura:100 Ancho:100.	caza:= Caza crearCazaPosicionEnX: 70 EnY:75  EnPlano:plano. 	20 timesRepeat: [				self should: (caza devolverPosicionY = pos).			caza mover.			pos:=pos-1.			].	! !!PruebaFlotaCazasYCazas methodsFor: 'PruebasCazasIndividuales' stamp: 'Barbara 5/4/2011 09:07'!testMovimientoAlternativoCaza"Prueba los movimientos alternativos de los cazas"	|caza plano pos|	pos:=45.	plano:=Plano crearPlanoAltura:100 Ancho:100.	caza:= Caza crearCazaPosicionEnX: 70 EnY:45  EnPlano:plano. 	20 timesRepeat: [				self should: (caza devolverPosicionY = pos).			caza moverAlternativo .			pos:=pos+1.			].	! !TestCase subclass: #PruebaHelicoptero	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaHelicoptero methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/4/2011 12:03'!testMoverAlternativo"Pruebo que al llamar a la funcion mover alternativo, realice el movimiento esperado en los helicopteros,es decir, el movimiento hacia atras"	|helicoptero plano pos|	plano:=Plano crearPlanoAltura:100 Ancho:100.	helicoptero:= Helicoptero crearHelicopteroPosicionEnX: 30 EnY: 65 EnPlano: plano.	pos:=65.	20 timesRepeat: [				self should: ((helicoptero  devolverPosicionY) = pos).			helicoptero moverAlternativo .			pos:=pos+1.			].! !!PruebaHelicoptero methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/2/2011 20:09'!testMoverHelicoptero"Prueba los movimientos de los helicopteros."	|helicoptero plano pos|	plano:=Plano crearPlanoAltura:100 Ancho:100.	pos:=95.	helicoptero:= Helicoptero crearHelicopteroPosicionEnX: 10 EnY: 95 EnPlano:plano.	20 timesRepeat:[		helicoptero mover.		pos:=pos-1.		self should: (helicoptero devolverPosicionY = pos & helicoptero devolverPosicionX = 10).	].! !TestCase subclass: #PruebaIntegracionEInteracciones	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaIntegracionEInteracciones commentStamp: '<historical>' prior: 0!Pruebas que prueban mas de una clase a la vez, y por lo tanto, prueban la interaccion entre objetos.!]style[(100)f1!!PruebaIntegracionEInteracciones methodsFor: 'Pruebas' stamp: 'Barbara 5/2/2011 19:58'!testChoqueAlgoAvioneta	"Prueba que realiza un choque entre una instancia de algo42 y una avioneta"	|avioneta algo plano|		"Los objetos ubicables necesitan un plano donde moverse."	plano:=Plano crearPlanoAltura:100 Ancho:100.		avioneta:=Avioneta crearAvionetaPosicionEnX: 50 EnY:30EnPlano:plano.	algo:=Algo42 crearAlgo42PosicionX: 50 Y: 20EnPlano:plano.		avioneta mover. "Avioneta posicion Y: 28"	self should: (avioneta devolverPosicionY =28).	algo moverArriba.  "algo posicion Y: 21"	self should: (algo devolverPosicionY=21).	"El algo tiene altura 5, 21+26<28, aun no chocan."	self should: ((avioneta intentarChocar: algo)=false).	self should: (algo devolverCantidadEnergia =100).	avioneta mover. "Avioneta posicion Y: 26"	self should: (avioneta devolverPosicionY =26).	algo moverArriba.  "algo posicion Y: 22"	self should: (algo devolverPosicionY=22).	"El algo tiene altura 5, 22+5=27, ya deberian haber chocado"	self should: ((avioneta intentarChocar: algo)=true).	"Pruebo que la cantidad de energia del algo42 se haya reducido en 30 puntos"	self should: (algo devolverCantidadEnergia =70).	"Pruebo que la avioneta haya quedado destruida luego del choque"	self should: ( (avioneta estadoActualDestruida )=true).! !!PruebaIntegracionEInteracciones methodsFor: 'Pruebas' stamp: 'Barbara 5/5/2011 21:06'!testChoqueNaveGuia	"Prueba realizar un choque entre una instancia de algo42 y una nave guia	del tipo guia1. Se trata de un caso especial ya que las naves guias son las unicas	que no son destruidas ni pierden puntos de energia al ser chocadas."	|guia algo guia1 plano|	plano:=Plano crearPlanoAltura:100 Ancho:100.	algo:= Algo42 crearAlgo42PosicionX: 50 Y: 30EnPlano:plano.	guia1:=Guia1 crearGuia1ConFlota: ( OrderedCollection new) enPosicionX: 50 Y:25 EnPlano: plano.	self should:[(guia1 devolverCantidadEnergia )=10].	self should:[(algo devolverCantidadEnergia )=100].	guia1 intentarChocar: algo.	"La nave algo perdio puntos de energia, pero la nave guia no"	self should:[(guia1 devolverCantidadEnergia )=10].	self should:[(algo devolverCantidadEnergia )=70].! !!PruebaIntegracionEInteracciones methodsFor: 'Pruebas' stamp: 'Barbara 5/5/2011 21:23'!testEventos	"Prueba bastantes aspectos del juego: la creacion de niveles, manejo del area del juego,	algunas funciones basicas del algo 42 y de las naves enemigas, y de la nave que las guia"	|plano guia flota n m algo|	plano:=Plano crearPlanoAltura: 150 Ancho: 150.	"Verifico que el nivel se inicializo con los valores correctos"	self should: ((plano devolverNivel ) =1).	algo:= Algo42 crearAlgo42PosicionX: 50 Y: 83 EnPlano:plano. 	"La idea seria que el algo 42 se inicialice en Y=0 o algun numero menor a 10 (ser ubicados	inicialmente en alturas grandes seria mas propio de naves enemigas) pero lo voy	a inicializar en 82 para no tener que mover tantas veces y acelerar las pruebas"	flota:= Array new:15. "Creo un array con 15 elementos para que contenga la flota"	n:=0.	m:=10.	"Creo 5 naves y las ubico "	[n<5]whileTrue:[		n:=n+1.		flota at:n put: (Civil crearCivilPosicionEnX:m EnY:5 EnPlano:plano).		m:=m+10.		].	"Hago que mi lista de avionetas sea la flota que dirigira la nave guia"	guia:= Guia1 crearGuia1ConFlota: flota enPosicionX: 50  Y: 90 EnPlano:plano.		"Comienzan las pruebas de escena actual"	algo dispararLaser.	plano revisarEventos .	"Las armas se mueven dos posiciones por turno; Y el laser tiene una altura de 5 puntos. 	(o sea que esta de Y=88 a Y=83). Algo42 esta de 82 a 87.	Ademas la parte inferior de la nave enemiga esta en Y=89; Pero la nave enemiga se mueve.	cuando el algo42 dispare, va a crear un arma en su posicion, que se va a mover. En el turno siguiente,.	va a disparar de nuevo. En el primer turno, la nave enemiga deberia tener 10 de sus 20 puntos	totales, y en el siguiente deberia estar destruida."	self should: (guia devolverPosicionY=89).	"No deberia haber cambios en la nave algo42, porque no se movio	En cambio si deberia haber cambios en la nave guia"	self should: (algo devolverCantidadEnergia =100).	n :=guia devolverCantidadEnergia.	self should: (guia devolverCantidadEnergia=0).	self should: (guia estadoActualDestruida =true).	self should: ((plano devolverNivel)=2).! !!PruebaIntegracionEInteracciones methodsFor: 'Pruebas' stamp: 'Barbara 5/2/2011 19:43'!testInteraccionAlgo42ArmasPropias"Prueba interacciones entre naves algo42 y las armas que ellas mismas lanzan.Prueba que las naves algo42 no pueden atacarse a si mismas."	|algo laser avioneta1 avioneta2 plano|		plano:=Plano crearPlanoAltura:100 Ancho:100.		algo:= Algo42 crearAlgo42PosicionX: 50 Y: 6EnPlano:plano.	laser:=algo dispararLaser.	algo moverArriba.	self should:[laser intentarAtacar: algo]raise: AlgoSeAtacaASiMismoError .! !!PruebaIntegracionEInteracciones methodsFor: 'Pruebas' stamp: 'Barbara 5/4/2011 08:34'!testInteraccionAlgoYCazaItemsYArmas"Prueba el uso tanto de los torpedos simples como de los tanques de energia,con una instancia de caza y una nave algo 42."	|caza algo helicoptero laser torpedo item plano|		plano:=Plano crearPlanoAltura:100 Ancho:100.	caza:= Caza crearCazaPosicionEnX: 50 EnY:80 EnPlano:plano.	algo:= Algo42 crearAlgo42PosicionX: 50 Y: 5 EnPlano:plano.	torpedo:= caza dispararTorpedo.	laser:= algo dispararLaser.	[(algo devolverCantidadEnergia )=100 ]whileTrue:[		torpedo intentarAtacar:algo.		torpedo  mover.	].	self should: ((algo devolverCantidadEnergia  )=80).	[(caza estadoActualDestruida)]whileFalse:[		laser  mover.		laser intentarAtacar: caza.	].	item:= caza dejarTanque.	"Muevo la nave hacia arriba 76 veces para alcanzar el tanque"	76 timesRepeat: [algo moverArriba.		item intentarEfectoEn: algo. ].	self should: ((algo devolverCantidadEnergia )=120).! !!PruebaIntegracionEInteracciones methodsFor: 'Pruebas' stamp: 'Barbara 5/2/2011 19:55'!testInteraccionArmasNavesNoOperables"Prueba interacciones entre naves no operables y las armas que ellas mismas lanzan.Prueba que las naves no operables no pueden atacarse entre ellas"	|laser cohete avioneta bombardero plano|		plano:=Plano crearPlanoAltura:100 Ancho:100.		avioneta:= Avioneta crearAvionetaPosicionEnX: 50 EnY: 50 EnPlano: plano.	laser:=avioneta dispararLaser.	"Una avioneta es una nave no operable y por lo tanto, no puede atacarse a si misma"	self should:[laser intentarAtacar: avioneta]raise: AtaqueEntreNavesNoOperables .		bombardero:=Bombardero crearBombarderoPosicionEnX: 50 EnY: 58  EnPlano: plano .	cohete:= bombardero dispararCohete.	"Posicion actual del cohete: 60,60. Altura: 4. Al llegar a la posicion correcta, compruebo que levanta error."	cohete mover. "Posicion En Y= 56. Avioneta ocupa de 50 hacia arriba."	cohete mover. "Posicion En Y= 54."	cohete mover. "Posicion En Y= 52."	cohete mover. "Posicion En Y= 50."	self should:[cohete devolverPosicionY =50].	self should:[cohete intentarAtacar: avioneta] raise:  AtaqueEntreNavesNoOperables .! !!PruebaIntegracionEInteracciones methodsFor: 'Pruebas' stamp: 'Barbara 5/2/2011 19:58'!testUsoMunicionesLasers"Prueba el uso de municiones. Una avioneta le dispara a un algo42 y visceversa "	|avioneta algo listaArmas laserA laserB plano|		plano:=Plano crearPlanoAltura:100 Ancho:100.		avioneta:=Avioneta crearAvionetaPosicionEnX: 50 EnY:30EnPlano:plano.	algo:=Algo42 crearAlgo42PosicionX: 50 Y: 22EnPlano:plano.	laserA :=algo dispararLaser .	laserB :=avioneta dispararLaser .	self should: ((laserB intentarAtacar:algo) = false).	"Esto crea dos instancias de laser: una con origen Algo42 (que por lo tanto se mueve hacia arriba)	y otra con origen nave enemiga, que se mueve hacia abajo."	laserB mover.	self should:( (laserB devolverPosicionY )=28). "El algo42 llega hasta 27, y el laser esta entre 33 y 28."	self should: ((laserB intentarAtacar:algo) = false).	laserA  mover.	self should:((laserA devolverPosicionY )=24). "La avioneta llega hasta 30, y el laser de 24 a 29"	self should: ((laserA intentarAtacar:avioneta) = false).	laserB mover.	self should:( (laserB devolverPosicionY )=26). "El algo42 llega hasta 27, y el laser esta entre 33 y 26."	self should: ((laserB intentarAtacar:algo) = true).	laserA  mover.	self should:((laserA devolverPosicionY )=26). "La avioneta llega hasta 30, y el laser de 26 a 31"	self should: ((laserA intentarAtacar:avioneta) = true).! !!PruebaIntegracionEInteracciones methodsFor: 'Pruebas' stamp: 'Barbara 5/5/2011 00:53'!testUsoYEfectoMunicionesCohetesTorpedos"Prueba el uso de armas y sus efectos en naves. Primero crea una instancia de algo42, que destruye un bombardero.Toma sus armas. Prueba un cohete con una instancia de helicoptero, y luego un torpedocon una instancia de avion civil."	|bombardero helicoptero algo n listaLaser item cohete torpedo avion plano|		plano:=Plano crearPlanoAltura:100 Ancho:100.	algo:=Algo42 crearAlgo42PosicionX: 50 Y:10 EnPlano:plano. 	bombardero:=Bombardero crearBombarderoPosicionEnX: 50 EnY: 30 EnPlano:plano.	"Intentar dejar el arma ahora devuelve error"	self should: [bombardero dejarArma] raise: ItemNoDisponibleError .	listaLaser:=OrderedCollection new.	5 timesRepeat: [listaLaser add: (algo dispararLaser)].	"Lanzo 5 veces el laser porque el bombardero tiene 50 puntos de energia."	[bombardero estadoActualDestruida ]whileFalse:[		listaLaser do:[:laser|			laser mover.			laser intentarAtacar: bombardero.		].	].	item:= bombardero dejarArma.	"Intentar tirar el cohete antes de tenerlo deberia levantar un error"	self should:[algo dispararCohete]raise: ArmaNoDisponibleError.	"Me muevo 20 veces para tomar el arma."	20 timesRepeat: [algo moverArriba.		item intentarEfectoEn: algo ].	helicoptero:= Helicoptero crearHelicopteroPosicionEnX:  50 EnY: 60 EnPlano:plano.	cohete:=algo dispararCohete.	[helicoptero estadoActualDestruida]whileFalse:[		cohete mover.		helicoptero mover.		cohete intentarAtacar:helicoptero.		].	avion:= Civil crearCivilPosicionEnX: 20 EnY: 90 EnPlano:plano.	torpedo:=algo dispararTorpedoHacia: avion.	[avion estadoActualDestruida ] whileFalse: [		torpedo mover.		torpedo intentarAtacar:avion.		avion mover.		].! !!PruebaIntegracionEInteracciones methodsFor: 'Pruebas' stamp: 'Barbara 5/2/2011 19:44'!testUsoYLanzamientoMunicionesLasers"Prueba el uso de municiones, y la interaccion entre lasers y naves. Una avioneta le dispara a un algo42 y visceversa "	|avioneta algo listaArmas laserA laserB plano|		plano:=Plano crearPlanoAltura:100 Ancho:100.		avioneta:=Avioneta crearAvionetaPosicionEnX: 50 EnY:30EnPlano:plano.	algo:=Algo42 crearAlgo42PosicionX: 50 Y: 22EnPlano:plano.	laserA :=algo dispararLaser .	laserB :=avioneta dispararLaser .	self should: ((laserB intentarAtacar:algo) = false).	"Esto crea dos instancias de laser: una con origen Algo42 (que por lo tanto se mueve hacia arriba)	y otra con origen nave enemiga, que se mueve hacia abajo."	laserB mover.	self should:( (laserB devolverPosicionY )=28). "El algo42 llega hasta 27, y el laser esta entre 33 y 28."	self should: ((laserB intentarAtacar:algo) = false).	laserA  mover.	self should:((laserA devolverPosicionY )=24). "La avioneta llega hasta 30, y el laser de 24 a 29"	self should: ((laserA intentarAtacar:avioneta) = false).	laserB mover.	self should:( (laserB devolverPosicionY )=26). "El algo42 llega hasta 27, y el laser esta entre 33 y 26."	self should: ((laserB intentarAtacar:algo) = true).	laserA  mover.	self should:((laserA devolverPosicionY )=26). "La avioneta llega hasta 30, y el laser de 26 a 31"	self should: ((laserA intentarAtacar:avioneta) = true).! !TestCase subclass: #PruebaNaveNoOperable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaNaveNoOperable commentStamp: '<historical>' prior: 0!NaveNoOperable es una clase abstracta y por lo tanto, no puede ser instanciada. Aun asi, cuenta con metodos que sus hijos podran heredar. Se probaran los metodos estaFueraDeArea, intentarChocar y retirarse. Como NaveNoOperable no puede tener instancias, sus metodos seran probados con instancias de avionetas, las cuales no redefinen ninguno de los metodos mencionados.!]style[(369)f1!!PruebaNaveNoOperable methodsFor: 'Pruebas' stamp: 'Barbara 5/2/2011 20:55'!testChocar	"Prueba colocar avionetas en distintas posiciones y chocar una instancia de algo42.	Si el choque se dio, deberia devolver true, o false en caso contrario"		|avioneta algo plano|		plano:= Plano crearPlanoAltura: 100 Ancho:100. 		avioneta:= Avioneta crearAvionetaPosicionEnX: 85 EnY: 85 EnPlano: plano.	algo:= Algo42 crearAlgo42PosicionX: 85 Y: 79 EnPlano: plano.  "Un algo42 tiene altura 5. O sea: va de 79 a 84. Aun no chocan."	self should: [(avioneta intentarChocar: algo)=false.].	avioneta mover.	self should: [(avioneta intentarChocar: algo)=true.].! !!PruebaNaveNoOperable methodsFor: 'Pruebas' stamp: 'Barbara 5/2/2011 20:32'!testEstaFueraDeArea"Prueba el metodo esta fuera de area con una avioneta"	|plano avioneta|	plano:=Plano crearPlanoAltura: 80 Ancho: 80.	avioneta:=Avioneta crearAvionetaPosicionEnX: 10 EnY: 10  EnPlano: plano.	"Muevo 5 veces la avioneta; Va de 10 a 0, por lo cual aun esta en el plano del juego"	5 timesRepeat: [		avioneta mover.		self should: (avioneta estadoActualFueraDeJuego =false).		self should: (avioneta estaFueraDeArea =false).		].	"La muevo una vez mas y ya esta fuera de juego"	avioneta mover.	self should: (avioneta estadoActualFueraDeJuego =true).	self should: (avioneta estaFueraDeArea =true)! !!PruebaNaveNoOperable methodsFor: 'Pruebas' stamp: 'Barbara 5/2/2011 20:34'!testRetirarse"Prueba el movimiento para retirarse en una avioneta"	|plano avioneta pos|	plano:=Plano crearPlanoAltura: 80 Ancho: 80.	avioneta:=Avioneta crearAvionetaPosicionEnX: 10 EnY: 10  EnPlano: plano.	pos:=10.	5 timesRepeat: [		avioneta retirarse.		pos:=pos+1.		self should: (avioneta devolverPosicionY =pos).		].! !!PruebaNaveNoOperable methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/4/2011 11:58'!testIntentarMoverBombardero"Voy a probar el uso de la funcion Intentar mover con un bombardero."	|bombardero1 bombardero2 avioneta plano|	plano:=Plano crearPlanoAltura:100 Ancho:100.	bombardero1 := Bombardero crearBombarderoPosicionEnX: 50 EnY:92EnPlano:plano. 	20 timesRepeat: [bombardero1 intentarMovimiento ].	self should: [bombardero1  devolverPosicionX=60].	self should: [bombardero1 devolverPosicionY =82 ].	"ahora deberia empezar a moverse a la izquierda"	bombardero1 intentarMovimiento .	self should: [bombardero1  devolverPosicionX=59.5].	self should: [bombardero1 devolverPosicionY =81.5 ].	"Creo otro bombardero para que este por chocarse con el. Tener en cuenta dimensiones del bombardero= 7x7"	bombardero2 := Bombardero crearBombarderoPosicionEnX: 52.5 EnY: 81.5  EnPlano: plano.	bombardero2 intentarMovimiento .	bombardero1 intentarMovimiento .	"Segun esto, el bombardero2 deberia haber cambiado su direccion a la izquierda."	self should: [bombardero2  devolverPosicionX=52].	self should: [bombardero2  devolverPosicionY=81].	"Ahora voy a crear una avioneta (dimensiones 3x6)justo debajo del bombardero2 y voy a mover a bombardero1, provocando que no pueda moverse."	avioneta:=Avioneta crearAvionetaPosicionEnX: 52 EnY: 75  EnPlano: plano.	bombardero2 intentarMovimiento .	Transcript show:bombardero2  devolverPosicionX.	self should: [bombardero2  devolverPosicionX=52].	self should: [bombardero2  devolverPosicionY=81].! !!PruebaNaveNoOperable methodsFor: 'PruebasMovimiento' stamp: 'Barbara 5/4/2011 11:26'!testIntentarMoverCivil"Voy a probar el uso de la funcion Intentar mover utilizando una nave civil.Pruebo las alternativas de movimiento del avion civil, dejandole el paso libre y tambien poniendo obstaculosen su camino, para probar que realiza los movimientos correctos"	|helicoptero civil avioneta plano|		plano:=Plano crearPlanoAltura: 100 Ancho: 100.	helicoptero:= Helicoptero crearHelicopteroPosicionEnX: 30 EnY: 20 EnPlano: plano.	civil:=Civil crearCivilPosicionEnX: 30 EnY: 26 EnPlano: plano.	civil intentarMovimiento.  "La primera vez que lo mueva, deberia poder moverse hacia adelante normalmente"	self should:[(civil devolverPosicionY )=25 ].	civil intentarMovimiento.	self should:[(civil devolverPosicionY) =26 ]. "Ahora si, la otra nave esta obstaculizando el camino, por eso se va hacia atras."	civil intentarMovimiento.	self should:[(civil devolverPosicionY )=25 ]. "Recordar que una nave civil tiene altura 5. Ocupa desde 25 hasta 30"	"Ahora voy a crear otra nave, una avioneta, que se ubicara detras de civil. Con esto quiero probar	que si todos los caminos estan totalmente obstaculizados, entonces la nave no se mueve."	avioneta:=Avioneta crearAvionetaPosicionEnX: 30 EnY: 31  EnPlano: plano. 	civil intentarMovimiento.	self should:[(civil devolverPosicionY )=25 ].! !TestCase subclass: #PruebaNivel	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaNivel methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 01:55'!testAvanzarInvalido"Prueba que si no se sumaron los puntos necesarios, no se puede avanzar de nivel"	|plano caza posx posy nivel|		nivel:= Nivel new.	self should: [(nivel devolverPuntosActuales )=0].	self should: [nivel avanzarNivel] raise: NivelError.! !!PruebaNivel methodsFor: 'Acciones' stamp: 'Barbara 5/5/2011 01:37'!testAvanzarNiveles"Crea un plano y una lista de naves, a las cuales les modificara la energia para que pasen a estar destruidas.Las naves seran 20 cazas. La destruccion de un caza da 50 puntos; Eliminar 20 da los 1000 puntos necesariospara avanzar de nivel."	|plano caza posx posy nivel|		nivel:= Nivel new.	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	posx:=0.	posy:=0.	self should:[ (nivel devolverNumeroNivel)=1 ].	20 timesRepeat: [		posx:=posx+10.		posy:=posy+10.		caza:= Caza crearCazaPosicionEnX: posx EnY: posy  EnPlano: plano.		caza modificarEnergia: -20. "Destruyo el caza"		].	nivel sumarPuntajeTurno: plano listaNavesEliminadas .	"Deberia haber avanzado un nivel"	self should:[ (nivel devolverNumeroNivel)=2 ].! !TestCase subclass: #PruebaPlano	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaPlano methodsFor: 'IngresoInfoListas' stamp: 'Barbara 5/5/2011 02:08'!testAgregarArmaInvalida"Prueba que no puede insertarse un arma usada a la lista de armas, ni tampoco un arma no usada a la lista de armas usadas"	|arma avioneta plano| "Voy a crear una avioneta solo para poder usar el arma"	plano:= Plano crearPlanoAltura: 100 Ancho: 100.	arma:= Laser LanzarLaserPosicionEnX:50 EnY:50 OrigenAlgo42:true EnPlano:plano.	self should:[plano agregarArmaUsada:arma]raise:ArmaNoUsadaError.	avioneta:=Avioneta crearAvionetaPosicionEnX:  50 EnY: 50  EnPlano: plano.	arma intentarAtacar: avioneta.	self should:[plano agregarArma:arma]raise:ArmaUsadaError.! !!PruebaPlano methodsFor: 'IngresoInfoListas' stamp: 'Barbara 5/5/2011 02:17'!testAgregarNaveInvalida"Prueba que no puede insertarse un nave destruida a la lista de naves, ni tampoco un arma en juego a la lista de naves destruidas"	|avioneta plano| 	plano:= Plano crearPlanoAltura: 100 Ancho: 100.	avioneta:=Avioneta crearAvionetaPosicionEnX:  50 EnY: 50  EnPlano: plano.	self should:[plano agregarNaveEliminada: avioneta] raise: NaveNoDestruidaError .	avioneta modificarEnergia: -100.	self should:[plano agregarNave: avioneta]raise: NaveDestruidaError .! !TestCase subclass: #PruebaRectangulo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaRectangulo methodsFor: 'ComparacionUbicaciones' stamp: 'Barbara 5/5/2011 21:33'!testSuperposicionRectangulos"Prueba distintos casos de creacion y superposicion de rectangulos"	|rectangulo1 rectangulo2|		rectangulo1:= Rectangulo crearRectanguloAltura: 10 Ancho: 10.	rectangulo2:=Rectangulo crearRectanguloAltura: 10 Ancho: 10.		rectangulo1 determinarUbicacionEnX: 30 EnY: 30.	rectangulo2 determinarUbicacionEnX: 20 EnY: 20. "Superposicion solo por una punta"	self should:[(rectangulo1 coincideConPosicionDe: rectangulo2 )=true.]. 	rectangulo2 determinarUbicacionEnX: 30 EnY: 30. "Superposicion total"	self should:[(rectangulo1 coincideConPosicionDe: rectangulo2 )=true.]. 	rectangulo2 determinarUbicacionEnX: 47 EnY: 50. "Sin superposicion"	self should:[(rectangulo1 coincideConPosicionDe: rectangulo2 )=false]. ! !TestCase subclass: #PruebaTorpedoRastreador	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92071Pruebas'!!PruebaTorpedoRastreador methodsFor: 'movimiento' stamp: 'Barbara 5/5/2011 00:59'!testMover"Prueba el movimiento de un torpedo rastreador. Un torpedo de este tipodeberia ir acercandose a su objetivo."	|torpedo  plano avioneta|	plano:=Plano crearPlanoAltura: 100 Ancho: 100.	"Pruebas de lanzamiento de torpedos. Para probarlos, necesito un objetivo."	avioneta:=Avioneta crearAvionetaPosicionEnX: 70 EnY: 70 EnPlano: plano.		torpedo:= TorpedoRastreador lanzarTorpedoRastreadorPosicionEnX: 60 EnY: 65 OrigenAlgo:true EnPlano: plano.	torpedo determinarNaveRastrada: avioneta.	torpedo mover.	"Deberia haberse acercado un poco a la avioneta."		self should: ((torpedo devolverPosicionX)=61).	self should: ((torpedo devolverPosicionY)=66).	torpedo determinarNaveRastrada: avioneta.	torpedo mover.	10 timesRepeat:[			torpedo mover.			Transcript show: torpedo devolverPosicionX .					Transcript show: torpedo devolverPosicionY .	].	"Ahora deberia estar en la misma posicion de la avioneta."	self should: ((torpedo devolverPosicionY)=70).	self should: ((torpedo devolverPosicionX)=70).! !