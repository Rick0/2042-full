TestCase subclass: #MovimientoCircular	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!MovimientoCircular methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 17:20'!testMovimientoExplorador 	"Verifica la posician inicial del explorador."	| unManejador unExplorador |	unManejador := Manejador crearConLX: 500 LY: 500.	unExplorador := Explorador crearExploradorEn: unManejador.	self should: ( ( ( (unExplorador leerPosicion) leerX ) = 250 ) and: [ ( (unExplorador leerPosicion) leerY ) = 1 ] ) description: 'Verifica la posicion inicial del explorador'.		! !!MovimientoCircular methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 17:20'!testPosInicialExplorador	"Verifica la posician inicial del explorador."	| unManejador unExplorador |	unManejador := Manejador crearConLX: 500 LY: 500.	unExplorador := Explorador crearExploradorEn: unManejador.	self should: ( ( ( unExplorador leerPosicion ) leerX = 250 ) and: [ ( ( unExplorador leerPosicion ) leerY ) = 1 ] ) description: 'Verifica la posicion inicial del explorador'.		! !TestCase subclass: #RemoverNaves	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!RemoverNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 22:00'!testRemover	"Verifica que se quite lla nave del manejador."	| unManejador unaNave |		unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := HelicopteroPolicia crearPoliciaEn: unManejador.	unaNave morir: unManejador.	self should: ( unManejador cantidadDeElementos = 0) description: 'Mueren las Naves'	! !TestCase subclass: #PruebasDePosicion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!PruebasDePosicion methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/4/2011 00:26'!testUsasEsteEspacio	"Verifica que si dos espacios aereos tiene posiciones en comun, 'usasEsteEspacio' devuelva verdadero"	| unaPosicion unaNave unEspacioAereo|		unaNave := Avioneta new.	unaPosicion := Posicion crearPosicionX: 3 Y: 4.	unaNave darPosicion: ( unaPosicion ).	unEspacioAereo := OrderedCollection new.	unEspacioAereo add: unaPosicion.	unEspacioAereo add: ( Posicion crearPosicionX: 1 Y: 1 ).		self should: ( unaNave usasEsteEspacio: (unEspacioAereo)  ) description:   'Detecta espacios aereos superpuestos'.	! !TestCase subclass: #PruebaBalas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!PruebaBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 21:57'!testCreacionNoRastreadoras	"Verifica la creacion de una bala del tipo laser"	| unManejador unaPosicion unaBala |	unManejador := Manejador crearConLX: 500 LY: 500.	unaPosicion := Posicion crearPosicionX: 250 Y: 250.	unaBala := NoRastreadora crearBNRConPos: unaPosicion.	unManejador agregarBala: unaBala.	self should: (unManejador cantidadDeBalas = 1) description: 'Crea balas no rastreadoras'! !!PruebaBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testCreacionRastreadoras	"Verifica la creacion de una bala rastreadora"	| unManejador unaBala unaPosicion unAlgo42 d1 d2|	unManejador := Manejador crearConLX: 500 LY: 500.	unAlgo42 := Algo42 crearAlgo42En: unManejador.	unaPosicion := Posicion new.	unaPosicion darX: 50.	unaPosicion darY: 100.	unaBala := Rastreadora crearBRConPos: unaPosicion  YCombustible: 10.	unaBala darEquipo: (2).	unManejador agregarBala: unaBala.	self should: ( unManejador cantidadDeBalas = 1 ) description:  'Se creo una bala rastreadora.'.		! !!PruebaBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testImpactoRastreadoras	"Verifica la persecucion y posterior impacto de una bala rastreadora"	| unManejador unaBala unaPosicion unAlgo42 d1 d2 e1 e2 |	unManejador := Manejador crearConLX: 500 LY: 500.	unAlgo42 := Algo42 crearAlgo42En: unManejador.	unaPosicion := Posicion new.	unaPosicion darX: 50.	unaPosicion darY: 100.	unaBala := Rastreadora crearBRConPos: unaPosicion  YCombustible: 1000.	unaBala darEquipo: 2.	unManejador agregarBala: unaBala .	d1 := ( unaBala leerPosicion ) distancia: ( unAlgo42 leerPosicion ).	1 to: 380 do: [:i | unaBala mover: unManejador].	d2 := ( unaBala leerPosicion ) distancia: ( unAlgo42 leerPosicion ).	e1 := unAlgo42 leerEnergia.	unAlgo42 detectarImpactosDeBala: (unManejador listaDeBalas).	e2 := unAlgo42 leerEnergia.	self should: ( d2 = 0 ) description: 'Las balas rastreadoras se acerca a la posicion de busqueda'.	self should: ( e1 > e2 ) description: 'Las balas rastreadoras Impactan sobre Algo42'		! !!PruebaBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 17:58'!testMovimientoNoRastreadoras	"Verifica que las balas se muevan en linea recta"	| unManejador unaPosicion unaBala p1 p2|	unManejador := Manejador crearConLX: 500 LY: 500.	unaPosicion := Posicion crearPosicionX: 250 Y: 250.	unaBala := NoRastreadora crearBNRConPos: unaPosicion.	unaBala darEquipo: 1.	unaBala esUnLaser.	unManejador agregarBala: unaBala.	p1 := ( unaBala leerPosicion ) leerY.	unaBala mover: unManejador.	p2 := ( unaBala leerPosicion ) leerY.		self should: ( ( p1 + 4 = p2 ) ) description: 'Las balas No Rastreadoras se mueven en linea recta'	! !!PruebaBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testMovimientoRastreadoras	"Verifica la creacion de una bala rastreadora"	| unManejador unaBala unaPosicion unAlgo42 d1 d2|	unManejador := Manejador crearConLX: 500 LY: 500.	unAlgo42 := Algo42 crearAlgo42En: unManejador.	unaPosicion := Posicion new.	unaPosicion darX: 50.	unaPosicion darY: 100.	unaBala := Rastreadora crearBRConPos: unaPosicion  YCombustible: 10.	unaBala darEquipo: 2.	unManejador agregarBala: unaBala .	d1 := ( unaBala leerPosicion ) distancia: ( unAlgo42 leerPosicion ).	unaBala mover: unManejador.	d2 := ( unaBala leerPosicion ) distancia: ( unAlgo42 leerPosicion ).	"Ahora comprobamos que se haya acercado, es decir d2 < d1"	self should: ( d2 < d1 ) description: 'Las balas rastreadoras se acerca a la posicion de busqueda'.		! !!PruebaBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 17:59'!testVivirBalas	"Se prueba que mientras la bala este en los limites del mapa esta se mantenga referenciada, una vez que sale del mapa esta referencia debera dejar de existir."	| unManejador unaPosicion unaBala |	unManejador := Manejador crearConLX: 500 LY: 500.	unaPosicion := Posicion crearPosicionX: 250 Y: 250.	unaBala := NoRastreadora crearBNRConPos: unaPosicion.	unaBala darEquipo: 1.	unaBala esUnLaser.	unManejador agregarBala: unaBala.	1 to: 62 do: [ :i | unaBala vivir: unManejador.]. "Con esto avanza 244 posiciones"	self should: (unManejador cantidadDeBalas = 1 ) description: 'La referencia de la bala permanece mientras este en los limites'.	unaBala vivir: unManejador.	self should: ( unManejador cantidadDeBalas = 0) description: 'La referencia de la bala se quita cuando ya no esta en el mapa'.		! !TestCase subclass: #CrearUnMotor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!CrearUnMotor methodsFor: 'as yet unclassified' stamp: 'JuanDausa 4/19/2011 16:41'!testCrear	"Prueba crear un motor con limites X Y, luego lo verifica."	| m|		m := Manejador crearConLX: 600 LY: 800.	self should:(m limitex = 600) description: 'Creación del motor, limite x'.	self should:(m limitey = 800) description: 'Creación del motor, limite y'.! !!CrearUnMotor methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 18:50'!testCrearConLimites	"Verifica que no se pueda crear con limites incorrectos"	| m|		self should: [m := Manejador crearConLX: 100 LY: 100] raise: LimitesIncorrectos description: 'No debe crear con limites incorrectos'! !TestCase subclass: #DeteccionDeBalas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!DeteccionDeBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/8/2011 20:27'!testDeteccionDeEquipoAvionCivil	"Verifica que un Helicoptero de Policia , si muere, indique a que equipo pertece el autor del hecho."	| unManejador unaBala unaNave equipo energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := AvionCivil crearAvionEn: unManejador.	unaBala := NoRastreadora crearBNRConPos: ( unaNave leerPosicion ).	unaBala esUnLaser.	unaBala darEquipo: 1.	1 to: 10 do: [ :i |		unManejador agregarBala: unaBala.	].	equipo := unaNave detectarImpactosDeBalaYEquipo: (unManejador listaDeBalas).	energiaFinal := unaNave leerEnergia.	self should: ( energiaFinal = 0 ) description: 'Las balas destruyeron un Avion Civil'.	self should: ( equipo = 1 ) description: 'El equipo autor fue reconocido por el AvionCivil'.! !!DeteccionDeBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/8/2011 20:26'!testDeteccionDeEquipoHelicopteroPolicia	"Verifica que un Helicoptero de Policia , si muere, indique a que equipo pertece el autor del hecho."	| unManejador unaBala unaNave equipo energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := HelicopteroPolicia crearPoliciaEn: unManejador.  	unaBala := NoRastreadora crearBNRConPos: ( unaNave leerPosicion ).	unaBala esUnLaser.	unaBala darEquipo: 1.	1 to: 10 do: [ :i |		unManejador agregarBala: unaBala.	].	equipo := unaNave detectarImpactosDeBalaYEquipo: (unManejador listaDeBalas).	energiaFinal := unaNave leerEnergia.	self should: ( energiaFinal = 0 ) description: 'Las balas destruyeron un Helicoptero Policial'.	self should: ( equipo = 1 ) description: 'El equipo autor fue reconocido por el Helicoptero'.! !!DeteccionDeBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/8/2011 20:19'!testImpactoDeBalaEnAvionCivil	"Verifica que un Avion Civil  detecte una bala en su posición y se haga el daño correspondiente"	| unManejador unaBala unaNave  energiaInicial energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := AvionCivil crearAvionEn: unManejador.   	unaBala := NoRastreadora crearBNRConPos: ( unaNave leerPosicion ).	unaBala esUnLaser.	unaBala darEquipo: 1.	unManejador agregarBala: unaBala.	energiaInicial := unaNave leerEnergia.	unaNave detectarImpactosDeBalaYEquipo: (unManejador listaDeBalas).	energiaFinal := unaNave leerEnergia.	self should: ( energiaInicial >  energiaFinal  ) description: 'Las balas Impactan sobre un Avion Civil'.! !!DeteccionDeBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/8/2011 19:45'!testImpactoDeBalaEnAvioneta	"Verifica que una avioneta  detecte una bala en su posición y se haga el daño correspondiente"	| unManejador unaBala unaNave  energiaInicial energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := Avioneta crearAvionetaEn: unManejador.  	unaBala := NoRastreadora crearBNRConPos: ( unaNave leerPosicion ).	unaBala esUnLaser.	unaBala darEquipo: 1.	unManejador agregarBala: unaBala.	energiaInicial := unaNave leerEnergia.	unaNave detectarImpactosDeBala: (unManejador listaDeBalas).	energiaFinal := unaNave leerEnergia.	self should: ( energiaInicial >  energiaFinal  ) description: 'Las balas Impactan sobre Avioneta'! !!DeteccionDeBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/8/2011 19:44'!testImpactoDeBalaEnBombardero	"Verifica que un bombardero detecte una bala en su posición y se haga el daño correspondiente"	| unManejador unaBala unaNave  energiaInicial energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := Bombardero crearBombarderoEn: unManejador.  	unaBala := NoRastreadora crearBNRConPos: ( unaNave leerPosicion ).	unaBala esUnLaser.	unaBala darEquipo: 1.	unManejador agregarBala: unaBala.	energiaInicial := unaNave leerEnergia.	unaNave detectarImpactosDeBala: (unManejador listaDeBalas).	energiaFinal := unaNave leerEnergia.	self should: ( energiaInicial >  energiaFinal  ) description: 'Las balas Impactan sobre Bombardero'! !!DeteccionDeBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/8/2011 20:13'!testImpactoDeBalaEnCaza	"Verifica que un Caza detecte una bala en su posición y se haga el daño correspondiente"	| unManejador unaBala unaNave  energiaInicial energiaFinal unaPosicion |	unaPosicion := Posicion crearPosicionX: 50 Y: 50.	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := Caza new.	unaNave darStop: 0.	unaNave darPosicion: unaPosicion.  	unaBala  := NoRastreadora crearBNRConPos: ( unaNave leerPosicion ).	unaBala esUnLaser.	unaBala darEquipo: 1.	unManejador agregarBala: unaBala.	energiaInicial := unaNave leerEnergia.	unaNave detectarImpactosDeBala: (unManejador listaDeBalas).	energiaFinal := unaNave leerEnergia.	self should: ( energiaInicial >  energiaFinal  ) description: 'Las balas Impactan sobre un Explorador'.! !!DeteccionDeBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/8/2011 19:46'!testImpactoDeBalaEnExplorador	"Verifica que una avioneta  detecte una bala en su posición y se haga el daño correspondiente"	| unManejador unaBala unaNave  energiaInicial energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := Explorador crearExploradorEn: ( unManejador )    .	unaBala := NoRastreadora crearBNRConPos: ( unaNave leerPosicion ).	unaBala esUnLaser.	unaBala darEquipo: 1.	unManejador agregarBala: unaBala.	energiaInicial := unaNave leerEnergia.	unaNave detectarImpactosDeBala: (unManejador listaDeBalas).	energiaFinal := unaNave leerEnergia.	self should: ( energiaInicial >  energiaFinal  ) description: 'Las balas Impactan sobre un Explorador'.! !!DeteccionDeBalas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/8/2011 20:18'!testImpactoDeBalaEnHelicoptero	"Verifica que un Helicoptero de Policia   detecte una bala en su posición y se haga el daño correspondiente"	| unManejador unaBala unaNave  energiaInicial energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := HelicopteroPolicia crearPoliciaEn: unManejador.  	unaBala := NoRastreadora crearBNRConPos: ( unaNave leerPosicion ).	unaBala esUnLaser.	unaBala darEquipo: 1.	unManejador agregarBala: unaBala.	energiaInicial := unaNave leerEnergia.	unaNave detectarImpactosDeBalaYEquipo: (unManejador listaDeBalas).	energiaFinal := unaNave leerEnergia.	self should: ( energiaInicial >  energiaFinal  ) description: 'Las balas Impactan sobre un Helicoptero Policial'.! !TestCase subclass: #DaniosEnemigos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!TestCase subclass: #CrearNaves	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!CrearNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 21:59'!testCrearBombardero	"Verifica la creacion de un bombardero"	| unManejador unBombardero |	unManejador := Manejador crearConLX: 500 LY: 500.	unBombardero := Bombardero crearBombarderoEn: unManejador.	self should: ( unManejador cantidadDeElementos = 1 ) description: 'Crea un Bombardero y lo referencia en el manejador'.! !!CrearNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/6/2011 19:25'!testCrearExplorador	"Verifica la creacion de un bombardero"	| unManejador unExplorador |	unManejador := Manejador crearConLX: 500 LY: 500.	unExplorador := Explorador crearExploradorEn: unManejador.	self should: ( unManejador cantidadDeElementos = 1 ) description: 'Crea un explorador y lo referencia en el manejador'.! !!CrearNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 21:59'!testCrearNNaves	"Crea n naves y verifica su referenciacion en el motor."	|n m|	m := Manejador crearConLX: 800 LY: 1000.	n := 10 atRandom.	1 to: n do: [:i | Avioneta crearAvionetaEn: m.].	self should: [ (m cantidadDeElementos) = n ] description: 'Crear N Naves en un motor'	! !!CrearNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 17:20'!testCrearUnaNave	"Crea una nave y se fija que los limites de creacion sean correctos"		|unManejador unaNave|	unManejador := Manejador crearConLX: 1000 LY: 1000.	unaNave  := Bombardero crearBombarderoEn: unManejador.	self should:(((unaNave leerPosicion) leerY )= 0) description: 'LimiteY'.	self should:(((unaNave leerPosicion) leerX ) < 1000) description: 'LimiteX'.	! !TestCase subclass: #Colisiones	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!Colisiones methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionConAlgo42	"Verifica que los enemigos se choquen con Algo42 y le quiten energía"	|  unaNave unAlgo42 unManejador pos e1 e2|	unManejador := Manejador crearConLX: 500 LY: 500.	unAlgo42 := Algo42 crearAlgo42En: unManejador.	pos := Posicion crearPosicion: ( unAlgo42 leerPosicion ).	unaNave := Avioneta new.	unaNave darPosicion: pos.	unManejador agregarEnemigo: unaNave .	e1 := unAlgo42 leerEnergia.	unAlgo42 controlarPosicion: unManejador.	e2 := unAlgo42 leerEnergia.		self should: ( e1 > e2 ) description: 'La energia de Algo42 se ve decrementada al chocar con enemigos.'.! !!Colisiones methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionConAlgo42B	"Verifica que los enemigos se choquen con Algo42 y le quiten energía"	|  unaNave unAlgo42 unManejador pos e1 e2|	unManejador := Manejador crearConLX: 500 LY: 500.	unAlgo42 := Algo42 crearAlgo42En: unManejador.	pos := Posicion crearPosicion: ( unAlgo42 leerPosicion ).	unaNave := Bombardero  new.	unaNave darPosicion: pos.	unManejador agregarEnemigo: unaNave .	e1 := unAlgo42 leerEnergia.	unAlgo42 controlarPosicion: unManejador.	e2 := unAlgo42 leerEnergia.		self should: ( e1 > e2 ) description: 'La energia de Algo42 se ve decrementada al chocar con enemigos.'.! !!Colisiones methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionConAlgo42C	"Verifica que los enemigos se choquen con Algo42 y le quiten energía"	|  unaNave unAlgo42 unManejador pos e1 e2 |	unManejador := Manejador crearConLX: 500 LY: 500.	unAlgo42 := Algo42 crearAlgo42En: unManejador.	pos := Posicion crearPosicion: ( unAlgo42 leerPosicion ).	unaNave := Explorador new.	unaNave darPosicion: pos.	unManejador agregarEnemigo: unaNave .	e1 := unAlgo42 leerEnergia.	unAlgo42 controlarPosicion: unManejador.	e2 := unAlgo42 leerEnergia.		self should: ( e1 > e2 ) description: 'La energia de Algo42 se ve decrementada al chocar con enemigos.'.! !!Colisiones methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionConAlgo42D	"Verifica que los enemigos se choquen con Algo42 y le quiten energía"	|  unaNave unAlgo42 unManejador pos e1 e2 |	unManejador := Manejador crearConLX: 500 LY: 500.	unAlgo42 := Algo42 crearAlgo42En: unManejador.	pos := Posicion crearPosicion: ( unAlgo42 leerPosicion ).	unaNave := Caza new.	unaNave darStop: 0.	unaNave darPosicion: pos.	unManejador agregarEnemigo: unaNave .	e1 := unAlgo42 leerEnergia.	unAlgo42 controlarPosicion: unManejador.	e2 := unAlgo42 leerEnergia.		self should: ( e1 > e2 ) description: 'La energia de Algo42 se ve decrementada al chocar con enemigos.'.! !Colisiones subclass: #Nuevas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!Nuevas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionConAlgo42	"Verifica que algo42 detecte la colision y se haga el daño."	| unaNave unManejador unAlgo42 energiaInicial energiaFinal|	unManejador := Manejador crearConLX: 500 LY: 500.  	unAlgo42 := Algo42 crearAlgo42En: unManejador.  	unaNave := Avioneta crearAvionetaEn: unManejador.	unaNave darPosicion: ( unAlgo42 leerPosicion).	energiaInicial := unAlgo42 leerEnergia.	unAlgo42 detectarColisiones: ( unManejador listaDeNaves ).	energiaFinal := unAlgo42 leerEnergia.	self should: ( ( energiaFinal + Constantes danioPorChoque )= energiaInicial ) description: 'Colision de Algo42 contra otras naves'.! !!Nuevas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionDeAvionCivil	"Verifica que un Avion detecte la colision contra Algo42 y se haga el daño."	| unaNave unManejador unAlgo42 energiaInicial energiaFinal|	unManejador := Manejador crearConLX: 500 LY: 500.  	unAlgo42 := Algo42 crearAlgo42En: unManejador.  	unaNave := AvionCivil crearAvionEn: unManejador.  	unaNave darPosicion: ( unAlgo42 leerPosicion).	energiaInicial := unaNave leerEnergia.	unaNave detectarColisiones: ( unAlgo42 ).	energiaFinal := unaNave leerEnergia.	self should: ( ( energiaFinal + Constantes danioPorChoque ) = energiaInicial ) description: 'Colision de un Avion Civil contra otra nave'.! !!Nuevas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionDeAvioneta	"Verifica que una Avioneta detecte la colision contra Algo42 y se haga el daño."	| unaNave unManejador unAlgo42 energiaInicial energiaFinal|	unManejador := Manejador crearConLX: 500 LY: 500.  	unAlgo42 := Algo42 crearAlgo42En: unManejador.  	unaNave := Avioneta crearAvionetaEn: unManejador.	unaNave darPosicion: ( unAlgo42 leerPosicion).	energiaInicial := unaNave leerEnergia.	unaNave detectarColisiones: ( unAlgo42 ).	energiaFinal := unaNave leerEnergia.	self should: ( ( energiaFinal + Constantes danioPorChoque ) = energiaInicial ) description: 'Colision de Avioneta contra otra nave'.! !!Nuevas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionDeBombardero	"Verifica que un Bombardero detecte la colision contra Algo42 y se haga el daño."	| unaNave unManejador unAlgo42 energiaInicial energiaFinal|	unManejador := Manejador crearConLX: 500 LY: 500.  	unAlgo42 := Algo42 crearAlgo42En: unManejador.  	unaNave := Bombardero crearBombarderoEn: unManejador.  	unaNave darPosicion: ( unAlgo42 leerPosicion).	energiaInicial := unaNave leerEnergia.	unaNave detectarColisiones: ( unAlgo42 ).	energiaFinal := unaNave leerEnergia.	self should: ( ( energiaFinal + Constantes danioPorChoque ) = energiaInicial ) description: 'Colision de Bombardero contra otra nave'.! !!Nuevas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionDeCaza	"Verifica que un Caza detecte la colision contra Algo42 y se haga el daño."	| unaNave unManejador unAlgo42 energiaInicial energiaFinal|	unManejador := Manejador crearConLX: 500 LY: 500.  	unAlgo42 := Algo42 crearAlgo42En: unManejador.  	unaNave := Caza new.	unaNave darPosicion: ( unAlgo42 leerPosicion).	energiaInicial := unaNave leerEnergia.	unaNave detectarColisiones: ( unAlgo42 ).	energiaFinal := unaNave leerEnergia.	self should: ( ( energiaFinal + Constantes danioPorChoque ) = energiaInicial ) description: 'Colision de un Caza contra otra nave'.! !!Nuevas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionDeExplorador	"Verifica que un Explorador detecte la colision contra Algo42 y se haga el daño."	| unaNave unManejador unAlgo42 energiaInicial energiaFinal|	unManejador := Manejador crearConLX: 500 LY: 500.  	unAlgo42 := Algo42 crearAlgo42En: unManejador.  	unaNave := Explorador crearExploradorEn: unManejador.   	unaNave darPosicion: ( unAlgo42 leerPosicion).	energiaInicial := unaNave leerEnergia.	unaNave detectarColisiones: ( unAlgo42 ).	energiaFinal := unaNave leerEnergia.	self should: ( ( energiaFinal + Constantes danioPorChoque ) = energiaInicial ) description: 'Colision de Explorador contra otra nave'.! !!Nuevas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testColisionDeHelicoptero	"Verifica que un Helicoptero de Policia detecte la colision contra Algo42 y se haga el daño."	| unaNave unManejador unAlgo42 energiaInicial energiaFinal|	unManejador := Manejador crearConLX: 500 LY: 500.  	unAlgo42 := Algo42 crearAlgo42En: unManejador.  	unaNave := HelicopteroPolicia crearPoliciaEn: unManejador.  	unaNave darPosicion: ( unAlgo42 leerPosicion).	energiaInicial := unaNave leerEnergia.	unaNave detectarColisiones: ( unAlgo42 ).	energiaFinal := unaNave leerEnergia.	self should: ( ( energiaFinal + Constantes danioPorChoque ) = energiaInicial ) description: 'Colision de Helicoptero policial contra otra nave'.! !TestCase subclass: #MuerteDeNaves	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!MuerteDeNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 18:02'!testMuerteAviones	"Verifica que al destruir un Avion se resten los puntos"	| unManejador unaBala unAvion equipo|	unManejador := Manejador crearConLX: 500 LY: 500.	unAvion := HelicopteroPolicia crearPoliciaEn: unManejador.	unaBala := NoRastreadora crearBNRConPos: ( unAvion leerPosicion).	unaBala esUnLaser.	unaBala darEquipo: 1.	1 to: 9 do: [ :i |		unManejador agregarBala: unaBala.		equipo := unManejador choqueConBala: unAvion.	].	self should: (equipo = 1) description: 'Detecta la muerte causada por Algo42'.! !!MuerteDeNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 21:59'!testMuerteAvioneta	"Verifica que la muerte de la avioneta sume los puntos estipulados"	| unManejador unaNave |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := Avioneta crearAvionetaEn: unManejador.	unaNave sumarPuntos: unManejador.	self should: ( unManejador leerPuntos = 20 ) description: 'Sumar los puntos por la muerte de una avioneta'.	! !!MuerteDeNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 21:59'!testMuerteBombarderos	"Verifica que la muerte de la avioneta sume los puntos estipulados"	| unManejador unaNave |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := Bombardero crearBombarderoEn: unManejador.	unaNave sumarPuntos: unManejador.	self should: ( unManejador leerPuntos = 30 ) description: 'Sumar los puntos por la muerte de una bombardero'.	! !!MuerteDeNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 21:59'!testMuerteCazas	"Verifica que la muerte de la avioneta sume los puntos estipulados"	| unManejador unaNave |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := Caza new.	unaNave darPosicionInicialX: 25 Y: 25.	unaNave darStop: 0.	unManejador agregarEnemigo: unaNave.	unaNave sumarPuntos: unManejador.	self should: ( unManejador leerPuntos = 30 ) description: 'Sumar los puntos por la muerte de una bombardero'.	! !!MuerteDeNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/6/2011 19:25'!testMuerteExploradores	"Verifica que la muerte de la avioneta sume los puntos estipulados"	| unManejador unaNave |	unManejador := Manejador crearConLX: 500 LY: 500.	unaNave := Explorador crearExploradorEn: unManejador.	unaNave sumarPuntos: unManejador.	self should: ( unManejador leerPuntos = 50 ) description: 'Sumar los puntos por la muerte de una explorador'.	! !!MuerteDeNaves methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 18:03'!testMuerteHelicopteros	"Verifica que al destruir un helicoptero se resten los puntos"	| unManejador unaBala unHelicoptero equipo|	unManejador := Manejador crearConLX: 500 LY: 500.	unHelicoptero := HelicopteroPolicia crearPoliciaEn: unManejador.	unaBala := NoRastreadora crearBNRConPos: ( unHelicoptero leerPosicion).	unaBala esUnLaser.	unaBala darEquipo: 1.	1 to: 9 do: [ :i |		unManejador agregarBala: unaBala.		equipo := unManejador choqueConBala: unHelicoptero.	].	self should: (equipo = 1) description: 'Detecta la muerte causada por Algo42'.! !TestCase subclass: #PruebasAvionetas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!PruebasAvionetas subclass: #Movimiento	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!Movimiento methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 17:20'!testMovimiendoDoble	"Chequea el movimiento en dos sentidos"	|unaNave unManejador p1 p2|	unManejador  := Manejador crearConLX: 800 LY: 1000.	unaNave  := Avioneta crearAvionetaEn: unManejador.	p1:= (unaNave leerPosicion) leerY.	unaNave mover: unManejador.	p2 := (unaNave leerPosicion) leerY.	self should: [p2 = (p1 + 1)] description: 'Movimiento lineal de la avioneta'.	1 to: 1050 do: [: i | unaNave mover: unManejador .].	p1 := (unaNave leerPosicion) leerY.	unaNave mover: unManejador.	p2 := (unaNave leerPosicion) leerY.	self should:( p1 = (p2+1)) description: 'Movimiento en ambos sentidos'.! !!Movimiento methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 17:20'!testMovimientoSimple	"Veriifica que se produzca un movimiento rectilineo"	|unaNave unManejador p1 p2|	unManejador  := Manejador crearConLX: 800 LY: 1000.	unaNave  := Avioneta crearAvionetaEn: unManejador.	p1:= (unaNave leerPosicion) leerY.	unaNave mover: unManejador.	p2 := (unaNave leerPosicion) leerY.	self should: [p2 = (p1 + 1)] description: 'Movimiento lineal de la avioneta'! !TestCase subclass: #PruebasCazas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!PruebasCazas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 21:59'!testCrearUnaFlota	"Crea una flota de cazas y verifica que se referencien en el motor"	| unManejador unaFlota|	unManejador := Manejador crearConLX: 1000 LY: 1000.	unaFlota := Caza crearFlotaDeCazasEn: unManejador.	self should: ((unManejador cantidadDeElementos) = 5) description: 'Se creo una flota de 5 cazas'.! !!PruebasCazas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 21:59'!testDejarItem	"Verifica que el caza, al morir, deje caer el item de vida"	| unManejador unaFlota|	unManejador := Manejador crearConLX: 1000 LY: 1000.	unaFlota := Caza crearFlotaDeCazasEn: unManejador.		( unaFlota at: 1 ) morir: unManejador.	self should: (unManejador cantidadDeItems = 1) description: 'Deja caer el item'.! !!PruebasCazas methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 17:20'!testPosicionDeFlota	"Verifica que se creen en linea"	| unManejador unaFlota p1 p2 p3 p4 p5|	unManejador := Manejador crearConLX: 1000 LY: 1000.	unaFlota := Caza crearFlotaDeCazasEn: unManejador.	self should: ( ( unaFlota at: 1 ) leerPosicion leerX = ( ( unManejador limitex ) / 2 ) ) description: 'Posicion del Lider'.	self should: (  ( ( unaFlota at: 2) leerPosicion leerX + ( unaFlota at: 3) leerPosicion leerX ) = 1000) description: 'Posicion de la primera fila'. "Una comprobación aritmetica sencilla ya que los corrimientos 	son iguales a ambos lados del lider"	self should: (  ( ( unaFlota at: 4) leerPosicion leerX + ( unaFlota at: 5) leerPosicion leerX ) = 1000) description: 'Posicion de la segunda fila'.	! !PruebasAvionetas subclass: #Disparos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!Disparos methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/3/2011 21:59'!testDispara	"Verifica que aumente la cantidad de balas"	|unaNave unManejador p1 p2|	unManejador  := Manejador crearConLX: 800 LY: 1000.	unaNave  := Avioneta crearAvionetaEn: unManejador. 	unaNave disparar: unManejador.	self should:( unManejador cantidadDeBalas = 1) description: 'Aumenta la cantidad de balas al disparar.'! !TestCase subclass: #PruebaAlgo42	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!PruebaAlgo42 subclass: #MovimientoAlgo42	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!MovimientoAlgo42 methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testAbajo	"Verifica el movimiento hacia abajo."	| algo42 unManejador p1 p2|	unManejador := Manejador crearConLX: 1000 LY: 1000.	algo42 := Algo42 crearAlgo42En: unManejador.	p1 := (algo42 leerPosicion) leerY.	algo42 moverAbajo: unManejador.	p2 := (algo42 leerPosicion) leerY.	self should: ( (p1-1)= p2) description: 'Movimiento hacia abajo'! !!MovimientoAlgo42 methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testArriba	"Verifica el movimiento haci arriba."	| algo42 unManejador p1 p2|	unManejador := Manejador crearConLX: 1000 LY: 1000.	algo42 := Algo42 crearAlgo42En: unManejador.	p1 := (algo42 leerPosicion) leerY.	algo42 moverArriba: unManejador.	p2 := (algo42 leerPosicion) leerY.	self should: ( (p1+1)= p2) description: 'Movimiento hacia arriba'! !!MovimientoAlgo42 methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testDerecha	"Verifica el movimiento hacia abajo."	| algo42 unManejador p1 p2|	unManejador := Manejador crearConLX: 1000 LY: 1000.	algo42 := Algo42 crearAlgo42En: unManejador.	p1 := (algo42 leerPosicion) leerX.	algo42 moverDerecha: unManejador.	p2 := (algo42 leerPosicion) leerX.	self should: ( (p1 + 1)= p2) description: 'Movimiento hacia derecha'! !!MovimientoAlgo42 methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testIzquierda	"Verifica el movimiento hacia abajo."	| algo42 unManejador p1 p2|	unManejador := Manejador crearConLX: 1000 LY: 1000.	algo42 := Algo42 crearAlgo42En: unManejador.	p1 := (algo42 leerPosicion) leerX.	algo42 moverIzquierda: unManejador.	p2 := (algo42 leerPosicion) leerX.	self should: ( (p1 - 1)= p2) description: 'Movimiento hacia izquierda'! !!MovimientoAlgo42 methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testLimites	"Verifica que la energia de Algo42 baje al tratar de salir de los limites"	| algo42 unManejador e1 e2|	unManejador := Manejador crearConLX: 500 LY: 500.	algo42 := Algo42 crearAlgo42En: unManejador.	1 to: 250 do: [ :i | algo42 moverDerecha: unManejador. ].	e1 := algo42 leerEnergia.	algo42 moverDerecha: unManejador.	e2 := algo42 leerEnergia.	self should: ( e1 > e2 ) description: 'Quita energia a Algo42 al tratar de salir del mapa'.! !PruebaAlgo42 subclass: #UsoDeItems	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!UsoDeItems methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 19:51'!TipoInvalido	"Verifica que se lanze la excepcion al pasar un tipo invalido"	| unItem |	unItem := Item new.	self should: ( unItem darTipo: 0  ) raise: ErrorDeTipoItem description: 'Error en tipo de Item' .! !!UsoDeItems methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testLevantarItem	"Verifica que la energia de Algo42 baje al tratar de salir de los limites"	| algo42 unManejador e1 e2 item|	unManejador := Manejador crearConLX: 500 LY: 500.	algo42 := Algo42 crearAlgo42En: unManejador.	e1 := algo42 leerEnergia.	item := Item crearUnItemEn: unManejador.	item darTipo: 2.	item darPosicion: (algo42 leerPosicion).	algo42 controlarPosicion: unManejador.	e2 := algo42 leerEnergia.		self should: ( e1 < e2 ) description: 'Suma energia al levantar el item'.! !!UsoDeItems methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testLevantarItem2	"Verifica que la energia de Algo42 baje al tratar de salir de los limites"	| algo42 unManejador e1 e2 item|	unManejador := Manejador crearConLX: 500 LY: 500.	algo42 := Algo42 crearAlgo42En: unManejador.	item := Item crearUnItemEn: unManejador.	item darTipo: 1.	item darPosicion: (algo42 leerPosicion).	algo42 controlarPosicion: unManejador.			self should: ( (algo42 leerArmas) = 2 ) description: 'Suma Armas al levantar el Item'.! !!UsoDeItems methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testUsartemArmas	"Verifica que la energia de Algo42 baje al tratar de salir de los limites"	| algo42 unManejador e1 e2 item|	unManejador := Manejador crearConLX: 500 LY: 500.	algo42 := Algo42 crearAlgo42En: unManejador.	item := Item crearUnItemEn: unManejador.	item darTipo: 1.	item darPosicion: (algo42 leerPosicion).	item usarEn: algo42..		self should: ( (algo42 leerArmas) = 2 ) description: 'Suma armas al levantar el item'.! !!UsoDeItems methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testUsartemEnergia	"Verifica que la energia de Algo42 baje al tratar de salir de los limites"	| algo42 unManejador e1 e2 item|	unManejador := Manejador crearConLX: 500 LY: 500.	algo42 := Algo42 crearAlgo42En: unManejador.	e1 := algo42 leerEnergia.	item := Item crearUnItemEn: unManejador.	item darTipo: 2.	item darPosicion: (algo42 leerPosicion).	item usarEn: algo42.	e2 := algo42 leerEnergia.		self should: ( e1 < e2 ) description: 'Suma energia al levantar el item'.! !PruebaAlgo42 subclass: #Disparar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!Disparar methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testDisparosSimples	"Verifica que el Algo42 dispare, en principio un laser"	| algo42 unManejador |	unManejador := Manejador crearConLX: 1000 LY: 1000.	algo42 := Algo42 crearAlgo42En: unManejador.	algo42 disparar: unManejador.	self should: (unManejador cantidadDeBalas = 1) description: 'Algo42 dispara lasers'.	! !!Disparar methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testDisparosTotales	"Verifica que el Algo42 dispare, en principio un laser"	| algo42 unManejador |	unManejador := Manejador crearConLX: 1000 LY: 1000.	algo42 := Algo42 crearAlgo42En: unManejador.	algo42 sumarArmas. 	algo42 disparar: unManejador.	self should: (unManejador cantidadDeBalas = 3) description: 'Algo42 dispara lasers, cohetes y torpedos rastreadores'.	! !PruebaAlgo42 subclass: #Creacion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!Creacion methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testCrearAlgo42	"Verifica la creacion de algo 42"	| algo42 unManejador a|	unManejador := Manejador crearConLX: 1000 LY: 1000.	algo42 := Algo42 crearAlgo42En: unManejador.	a := unManejador posAlgo42.	self should: (a leerX = (algo42 leerPosicion) leerX) description: 'Creacion de Algo42 correcta, X'.	self should: (a leerY = (algo42 leerPosicion) leerY) description: 'Creacion de Algo42 correcta, Y'.! !!Creacion methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testCrearDosAlgo42	"Verifica la no creacion de un segundo algo 42"	| algo42 unManejador a|	unManejador := Manejador crearConLX: 1000 LY: 1000.	algo42 := Algo42 crearAlgo42En: unManejador.	self should: [a := Algo42 crearAlgo42En: unManejador ] raise: MasDeUnAlgo42 description: 'No deja crear más de un algo 42'.! !PruebaAlgo42 subclass: #Danios	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Test-1942'!!Danios methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 21:00'!testDanioPorBalaNoRastradora	"Verifica que una bala danie a Algo42, independientemente del equipo al que pertezca"	| unManejador unaBala unAlgo42  energiaInicial energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 500.	unAlgo42 := Algo42 crearAlgo42En: unManejador..	unaBala := NoRastreadora crearBNRConPos: ( unAlgo42 leerPosicion ).	unaBala esUnLaser.	unaBala darEquipo: 2.	unManejador agregarBala: unaBala.	energiaInicial := unAlgo42 leerEnergia.	unAlgo42 detectarImpactosDeBala: (unManejador listaDeBalas).	energiaFinal := unAlgo42 leerEnergia.	self should: ( energiaInicial >  energiaFinal  ) description: 'Las balas Impactan sobre Algo42'	! !!Danios methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:58'!testDanioPorBalaRastradora	"Verifica que una bala danie a Algo42, independientemente del equipo al que pertezca"	| unManejador unaBala unAlgo42  energiaInicial energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 500.	unAlgo42 := Algo42 crearAlgo42En: unManejador..	unaBala := Rastreadora crearBRConPos: ( unAlgo42 leerPosicion )  YCombustible: 1000.	unaBala darEquipo: 2.	unManejador agregarBala: unaBala.	energiaInicial := unAlgo42 leerEnergia.	unAlgo42 detectarImpactosDeBala: (unManejador listaDeBalas).	energiaFinal := unAlgo42 leerEnergia.	self should: ( energiaInicial >  energiaFinal  ) description: 'Las balas Impactan sobre Algo42'	! !!Danios methodsFor: 'as yet unclassified' stamp: 'JuanDausa 5/7/2011 20:05'!testDanioPorColision	"Verifica que la nave detecte el danio por colisiones"	| unaNave unManejador unAlgo42 energiaInicial energiaFinal |	unManejador := Manejador crearConLX: 500 LY: 600.	unAlgo42 := Algo42 crearAlgo42En: unManejador.	unaNave := Avioneta crearAvionetaEn: unManejador.	unaNave darPosicion: ( unAlgo42 leerPosicion ).	energiaInicial := unAlgo42 leerEnergia. 	unAlgo42 detectarColisiones: ( unManejador listaDeNaves ).	energiaFinal  := unAlgo42 leerEnergia.	self should: ( ( energiaFinal + Constantes danioPorChoque ) = energiaInicial ) description: 'Detecta danio por colisiones en Algo42'  	! !