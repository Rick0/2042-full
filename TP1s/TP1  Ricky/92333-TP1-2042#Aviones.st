Object subclass: #Arma	instanceVariableNames: 'velocidadDisparo velocidadDisparoCont cantidadMunicion avion direccion'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Arma methodsFor: 'acciones' stamp: 'Zhang 4/22/2011 20:19'!disparar: unEscenario	"El arma dispara, fijandose antes si tiene municiones, y tambien si se ha recargado o no."	self subclassResponsibility.! !!Arma methodsFor: 'acciones' stamp: 'Zhang 5/3/2011 02:10'!pasaUnTiempo	"Pasa una unidad abstracta de tiempo."	(velocidadDisparoCont = velocidadDisparo)		ifFalse: [			velocidadDisparoCont := velocidadDisparoCont + 1.						(velocidadDisparoCont > velocidadDisparo)				ifTrue: [ VelocidadDisparoContNoValido new signal. ].			].! !!Arma methodsFor: 'acciones' stamp: 'Zhang 5/3/2011 02:00'!vivir	"El vivir de cada arma se ocupa de recargarse.	Los disparos son accionados por el avion."	self pasaUnTiempo.! !!Arma methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 03:37'!aumentarCantidadMunicion: cantidad	"Aumenta la cantidad de municion del arma"	cantidadMunicion := cantidadMunicion + cantidad.! !!Arma methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 18:35'!getAvion	"Devuelve el avion que contiene esta arma.."	^avion.! !!Arma methodsFor: 'accessing' stamp: 'Zhang 5/1/2011 16:30'!getCantidadMunicion	"Devuelve la cantidad restante de municion del arma"	^cantidadMunicion.! !!Arma methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 22:39'!getDireccion	"Devuelve la direccion en la que apunta el arma y el avion."	^direccion.! !!Arma methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 00:53'!getVelocidadDisparo	"Devuelve la velocidad con que dispara el arma. A menor numero, mas rapido dispara."	^velocidadDisparo.! !!Arma methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 00:54'!getVelocidadDisparoCont	"Devuelve el contador de velocidad del arma."	^velocidadDisparoCont.! !!Arma methodsFor: 'accessing' stamp: 'Zhang 5/1/2011 17:39'!setCantidadMunicion: cantidad	"Cambia la cantidad de municion del arma"	cantidadMunicion := cantidad.! !!Arma methodsFor: 'accessing' stamp: 'Zhang 5/1/2011 17:39'!setVelocidadDisparoCont: velCont	"Cambia el numero del contador de velocidad del arma."	velocidadDisparoCont := velCont.! !Arma subclass: #LanzaCohete	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!LanzaCohete methodsFor: 'initialize' stamp: 'Zhang 5/1/2011 16:32'!crearLanzaCoheteSobre: unAvion  conDireccion: unaDireccion		cantidadMunicion := 30.	velocidadDisparo := 90.	velocidadDisparoCont := velocidadDisparo - 1.	avion := unAvion.	direccion := unaDireccion.! !!LanzaCohete methodsFor: 'acciones' stamp: 'Zhang 5/1/2011 18:02'!disparar: unEscenario	"El arma dispara, fijandose antes si tiene municiones, y tambien si se ha recargado o no."	| balaNueva |	(velocidadDisparoCont = velocidadDisparo)		ifTrue:			[ (cantidadMunicion > 0)			ifTrue:				[ balaNueva := Cohete new crearCoheteEn: (avion getPosicion)  conDireccion: (direccion).				(unEscenario getBalas) add: balaNueva.				cantidadMunicion := cantidadMunicion - 1.				].			velocidadDisparoCont := 0.			].! !Object subclass: #PatronDeMovimiento	instanceVariableNames: 'avion direccion'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!PatronDeMovimiento methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 05:25'!proximaPosicion	"Se calcula la proxima posicion dependiendo del patron de movimiento y de la posicion actual."	self subclassResponsibility.! !PatronDeMovimiento subclass: #PatronZigZag	instanceVariableNames: 'avanzarVel avanzarVelCont'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!PatronZigZag methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 06:34'!crearPatronZigZagEn: unAvion  conDireccion: unaDireccion	"Le otorga el patron de movimiento en zig zag a un avion, indicandole la direccion inicial del mismo."	avion := unAvion.	direccion := unaDireccion.	avanzarVel := 3.	avanzarVelCont := avanzarVel - 1.! !!PatronZigZag methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:51'!proximaPosicion	"Patron de movimiento zig zag.	El movimiento revisa los limites laterales, asi que el avion no se saldra del escenario por la izquierda o derecha, pero si puede hacerlo por la parte inferior.	Cada 4 veces que se mueva lateralmente, se mueve una vez hacia adelante, esto recrea el movimiento zig zag."	| posNuevo |	(direccion = 'haciaIzquierda')		ifTrue: [			( (avion getPosicion x) - 1) > 0				ifTrue: [ posNuevo := avion getPosicion - (1@0). ]								ifFalse: [					direccion := 'haciaDerecha'.					posNuevo := avion getPosicion + (1@0). 					].				]		ifFalse: [			(direccion = 'haciaDerecha')				ifTrue: [					( (avion getPosicion x) + 1) < (avion getEscenario getAncho)						ifTrue: [ posNuevo := avion getPosicion + (1@0). ]										ifFalse: [							direccion := 'haciaIzquierda'.							posNuevo := avion getPosicion - (1@0). 							].						].				].	(avanzarVelCont = avanzarVel)		ifTrue: [			posNuevo := posNuevo - (0@1).			avanzarVelCont := 0.			]		ifFalse: [ avanzarVelCont := avanzarVelCont + 1. ].	^posNuevo.! !Object subclass: #Municion	instanceVariableNames: 'danio posicion tamanio velocidad velocidadCont direccion escenario'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Municion methodsFor: 'accessing' stamp: 'Zhang 5/4/2011 19:00'!fueraDelEscenario	"Se fija si la posicion actual esta fuera del escenario o no."	(posicion y > escenario getAlto) | (posicion y < 0) | (posicion x > escenario getAncho) | (posicion x < 0)		ifTrue: [ ^true. ].	^false.! !!Municion methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 17:25'!getDanio	"Devuelve el danio del arma"	^danio.! !!Municion methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 20:39'!getDireccion	"Devuelve la direccion en la cual apunta."	^direccion.! !!Municion methodsFor: 'accessing' stamp: 'Zhang 5/4/2011 18:19'!getEscenario	"Devuelve el escenario de la municion."	^escenario.! !!Municion methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 17:25'!getPosicion	"Devuelve la posicion de la municion disparada."	^posicion.! !!Municion methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 17:25'!getTamanio	"Devuelve el tamanio de la municion disparada."	^tamanio.! !!Municion methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 17:25'!getVelocidad	"Devuelve la velocidad de la municion."	^velocidad.! !!Municion methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 17:25'!getVelocidadCont	"Devuelve el contador de velocidad de la municion."	^velocidadCont.! !!Municion methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 01:55'!impactaSobreAvion	"La bala impacta sobre un avion.	Tras cumplir con su proposito, desaparecera."	self morir.! !!Municion methodsFor: 'acciones' stamp: 'Zhang 5/4/2011 18:25'!morir	"Despues de impactar contra un avion, la bala es eliminada del escenario.	Esto tambien ocurre cuando se sale de los limites del escenario."	(escenario getBalas) remove: (self)  ifAbsent: [BalaNoSeEncuentra new signal. ].! !!Municion methodsFor: 'acciones' stamp: 'Zhang 5/1/2011 18:48'!mover	"El movimiento de la municion."	self subclassResponsibility.! !!Municion methodsFor: 'acciones' stamp: 'Zhang 5/3/2011 02:10'!pasaUnTiempo	"Pasa una unidad abstracta de tiempo."	(velocidadCont = velocidad)		ifFalse: [			velocidadCont := velocidadCont + 1.						(velocidadCont > velocidad)				ifTrue: [ VelocidadContNoValido new signal. ].			].! !!Municion methodsFor: 'acciones' stamp: 'Zhang 5/4/2011 19:02'!vivir	"El vivir de una bala."	self pasaUnTiempo.	self mover.	(self fueraDelEscenario = true)		ifTrue: [ self morir. ].! !Municion subclass: #MunicionNoRastreador	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!MunicionNoRastreador methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:49'!mover	"Las balas no rastreadoras tienen movimiento lineal, con direccion hacia abajo o arriba dependiendo del avion que lo disparo."	(velocidadCont = velocidad)		ifTrue:			[ (direccion = 'haciaAbajo')				ifTrue: 					[ posicion := posicion - (0@1). ]				ifFalse:					[ posicion := posicion + (0@1). ].			velocidadCont := 0.			].! !MunicionNoRastreador subclass: #Laser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Laser methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 04:04'!crearLaserEn: posInicial  conDireccion: unaDireccion	"Crea un laser sobre el escenario."		posicion := posInicial.	danio := 50.	tamanio := 1.	velocidad := 3.	velocidadCont := velocidad - 1.	direccion := unaDireccion.! !MunicionNoRastreador subclass: #TorpedoSimple	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!TorpedoSimple methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 04:04'!crearTorpedoSimpleEn: posInicial  conDireccion: unaDireccion	"Crea un torpedo simple sobre el escenario."		posicion := posInicial.	danio := 150.	tamanio := 2.	velocidad := 6.	velocidadCont := velocidad - 1.	direccion := unaDireccion.! !Object subclass: #Avion	instanceVariableNames: 'energia posicion tamanio velocidad velocidadCont armas puedeDisparar escenario'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Avion commentStamp: 'Zhang 4/17/2011 18:15' prior: 0!Avion has not been documented yet. The class comment should describe the purpose of the class, its collaborations and its variables.Instance Variables:	energia 	<ProtoObject | PseudoContext>	posicion	<ProtoObject | PseudoContext>	tamanio	<ProtoObject | PseudoContext>	velocidad	<ProtoObject | PseudoContext>!!Avion methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 00:44'!distancia: otraPosicion	"Devuelve la distancia entre dos posiciones."	| dist distX distY |	distX := (otraPosicion x - posicion x).	distY := (otraPosicion y - posicion y).	dist := ( (distX * distX) + (distY * distY ) ) sqrt.	^dist.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 5/4/2011 23:51'!fueraDelEscenario	"Se fija si la posicion actual esta fuera del escenario o no."	(posicion y > escenario getAlto) | (posicion y < 0) | (posicion x > escenario getAncho) | (posicion x < 0)		ifTrue: [ ^true. ].	^false.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 00:02'!getArmas	"Devuelve las armas del avion."	^armas.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 4/17/2011 18:15'!getEnergia	"Devuelve la energia del avion"	^energia.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 5/1/2011 18:40'!getEscenario	"Devuelve el escenario sobre el cual vuela el avion."	^escenario.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 4/17/2011 18:15'!getPosicion	"Devuelve la posicion del avion"	^posicion.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 4/17/2011 18:16'!getTamanio	"Devuelve el tamanio del avion"	^tamanio.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 4/17/2011 18:16'!getVelocidad	"Devuelve la velocidad del avion"	^velocidad.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 00:02'!getVelocidadCont	"Devuelve el contador de velocidad del avion"	^velocidadCont.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 00:59'!menorEnergia: otroAvion	"Compara la energia del avion con la de otro avion, y devuelve la energia del que tiene menos."	(energia <= otroAvion getEnergia)		ifTrue: [ ^energia. ]		ifFalse: [ ^otroAvion getEnergia. ].! !!Avion methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 13:23'!puedeDisparar	"Devuelve True si el avion puede disparar, False en el caso contrario."	^puedeDisparar.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 14:02'!reposicionar: unPos	"Reposiciona el avion."	posicion := unPos.! !!Avion methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 15:54'!yaNoPuedeDisparar	"Cambia el estado de 'puedeDisparar' a false."	puedeDisparar := false.! !!Avion methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 02:44'!colisionar	"La interaccion entre el avion y los demas aviones y balas del escenario."	self subclassResponsibility.! !!Avion methodsFor: 'acciones' stamp: 'Zhang 4/20/2011 13:55'!morir	"El avion ha perdido toda su energia, consecuentemente se destruira"	self subclassResponsibility.! !!Avion methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:41'!pasaUnTiempo	"Pasa una unidad abstracta de tiempo, y se actualiza el contador de velocidad del avion, necesaria para moverse,	y el contador de velocidad de disparo de cada arma que posee, necesaria para disparar."	(velocidadCont = velocidad) ifFalse: [			velocidadCont := velocidadCont + 1.				(velocidadCont > velocidad) ifTrue: [ VelocidadContNoValido new signal. ].		].	(armas size > 0) ifTrue: [		1 to: (armas size) do: [ :index |			(armas at: index) vivir.					].		].! !!Avion methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 01:57'!recibirChoque: danioDelChoque	"El avion es impactado por un avion o una bala.	Se restara el danio correspondiente."	self recibirDanio: danioDelChoque.! !!Avion methodsFor: 'acciones' stamp: 'Zhang 5/4/2011 20:27'!recibirDanio: danio	"A causa de una bala o un choque, el avion sufrira una perdida de energia"	(danio < 0) ifTrue: [DanioNegativo new signal ].	energia := energia - danio.	(energia <= 0) ifTrue: [ self morir. ].! !!Avion methodsFor: 'acciones' stamp: 'Zhang 4/22/2011 01:01'!vivir	"Esto es lo que hara cada avion en su turno."	self subclassResponsibility.! !Avion subclass: #AvionJugador	instanceVariableNames: 'invencible tiempoInvencible tiempoInvencibleCont vidasJugador'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/16/2011 14:12'!colisionar	"El avion jugador revisa si esta en las cercanias de algun avion enemigo, neutral, bala y tanque.	Si dos aviones estan en contacto, ambos reciben danio, y este danio es la energia actual del avion con menos energia. Por consiguiente, al menos uno de los dos aviones siempre se destruira tras el choque.	Si una bala impacta sobre el avion, avion recibe danio, y la bala explota/muere.	Si el avion jugador toca un tanque, el avion recibira su contenido, y el tanque desaparecera."	| i  unAvion  danioDeChoque  unaBala  danioDeBala  unTanque  contenidoDeTanque |	i := 1.	[i <= escenario getBalas size] whileTrue: [		unaBala := (escenario getBalas at: i).		(self distancia: (unaBala getPosicion) ) < (unaBala getTamanio + tamanio)			ifTrue: [				((unaBala getDireccion) = 'haciaAbajo')					ifTrue: [						danioDeBala := unaBala getDanio.						self recibirChoque: danioDeBala.						unaBala impactaSobreAvion.						]					ifFalse: [ i := i + 1. ].				]			ifFalse: [ i := i + 1. ].		].	i := 1.	[i <= escenario getAvionesEnemigos size] whileTrue: [		unAvion := (escenario getAvionesEnemigos at: i).		(unAvion distancia: posicion) < (unAvion getTamanio + tamanio)			ifTrue: [				danioDeChoque := ( self menorEnergia: unAvion ).				self recibirChoque: danioDeChoque.				unAvion recibirChoque: danioDeChoque.    				]			ifFalse: [ i := i + 1. ].		 ].	i := 1.	[i <= escenario getAvionesNeutrales size] whileTrue: [		unAvion := (escenario getAvionesNeutrales at: i).		(unAvion distancia: posicion) < (unAvion getTamanio + tamanio)			ifTrue: [				danioDeChoque := ( self menorEnergia: unAvion ).				self recibirChoque: danioDeChoque.				unAvion recibirChoque: danioDeChoque.    				]			ifFalse: [ i := i + 1. ].		].	i := 1.	[i <= escenario getTanques size] whileTrue: [		unTanque := (escenario getTanques at: i).		(self distancia: unTanque getPosicion) < (unTanque getTamanio + tamanio)			ifTrue: [				contenidoDeTanque := ( unTanque getContenido ).				self recibirContenido: contenidoDeTanque.				unTanque esUsado.    				]			ifFalse: [ i := i + 1. ].		].! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/4/2011 18:04'!disparar: armaPos	"El avion del jugador dispara.	Al comienzo solo podra disparar lasers, despues adquiriendo tanques de armas, podra usar las otras armas."	| armaPosAux |	armaPosAux := armaPos.	(armaPosAux <= armas size) & (armaPosAux >= 1)		ifFalse: [ armaPosAux := 1. ].	(armas at: armaPosAux) disparar: escenario.! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/3/2011 04:53'!estadoInvencible	"Cuando un avion jugador es golpeado o chocado, entrara en modo de invencibilidad.	Este metodo se encarga de regular el tiempo de invencibilidad."	(invencible = true)	ifTrue: [		(tiempoInvencibleCont > 0)		ifTrue: [	tiempoInvencibleCont := tiempoInvencibleCont - 1.	].				(tiempoInvencibleCont = 0)		ifTrue: [			invencible := false.			tiempoInvencibleCont := tiempoInvencible.					].		].! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/4/2011 16:59'!morir	"El avion ha perdido toda su energia, y ahora se destruira.	Como es un avion enemigo, su destruccion suma puntos."	self resetearAvion.	self resetearArmas.	self disminuirVidasJugador.! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:44'!moverAbajo	"Mueve el avion hacia abajo"	(self puedeMover: (posicion - (0@1) ) )		ifTrue: [		(velocidadCont = velocidad)			ifTrue: [			posicion := (posicion - (0@1) ) asIntegerPoint.			velocidadCont := 0.			].		].! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:44'!moverArriba	"Mueve el avion hacia arriba"	(self puedeMover: (posicion + (0@1) ) )		ifTrue: [		(velocidadCont = velocidad)			ifTrue: [			posicion := (posicion + (0@1) ) asIntegerPoint.			velocidadCont := 0.			].		].! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:44'!moverDer	"Mueve el avion hacia la derecha"	(self puedeMover: (posicion + (1@0) ) )		ifTrue: [		(velocidadCont = velocidad)			ifTrue: [			posicion := (posicion + (1@0) ) asIntegerPoint.			velocidadCont := 0.			].		].! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:43'!moverIzq	"Mueve el avion hacia la izquierda"	(self puedeMover: (posicion - (1@0) ) )		ifTrue: [		(velocidadCont = velocidad)			ifTrue: [			posicion := (posicion - (1@0) ) asIntegerPoint.			velocidadCont := 0.			].		].! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 03:43'!recibirContenido: contenido	"A causa de un tanque, el avion del jugador recibe el contenido dentro de ella."	(contenido = 'torpedoRastreador')		ifTrue: [	(armas at: 3) aumentarCantidadMunicion: 9. ]		ifFalse: [			(contenido = 'cohete')				ifTrue: [	(armas at: 2) aumentarCantidadMunicion: 7. ]				ifFalse: [					energia := energia + contenido.					(energia > 1000) ifTrue: [ energia := 1000. ].					].			].! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 01:09'!recibirDanio: danio	"Un avion del jugador recibe danio a causa de balas o choques, siempre y cuando que no este en modo invencible (adquirido por un danio anterior)."	(danio < 0) ifTrue: [DanioNegativo new signal ].	(invencible = false) ifTrue: [		energia := energia - danio.		(energia <= 0) ifTrue: [ self morir. ].		invencible := true.		].! !!AvionJugador methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 21:27'!vivir	"Como todo 'vivir', el metodo actualiza el contador de velocidad, necesario para poder moverse.	Lo diferente del vivir de un avion jugador, es que tambien se encarga de actualizar (decrecer) el tiempo de invencibilidad del mismo, si es que fue golpeado o chocado."	self pasaUnTiempo.	self estadoInvencible.	self colisionar.! !!AvionJugador methodsFor: 'resetear' stamp: 'Zhang 5/5/2011 12:36'!resetearArmas	"Pone las armas como al principio: con solo el laser disponible."	2 to: (armas size) do: [ :i |		(armas at: i) setCantidadMunicion: 0.		].! !!AvionJugador methodsFor: 'resetear' stamp: 'Zhang 5/4/2011 16:36'!resetearAvion	"Cambia al avion jugador al estado inicial, con la diferencia de que conserva las armas adquiridas.	Los valores que siempre se mantienen constantes (como la velocidad o el tamanio) no deberan ser modificados en ningun lugar."	energia := 1000.	posicion := ( (tamanio+1)@( (escenario getAncho / 2) asInteger) ).	puedeDisparar := true.	invencible := false.	tiempoInvencibleCont := tiempoInvencible.! !!AvionJugador methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 13:40'!disminuirVidasJugador	"Resta una vida al total de vidas."	vidasJugador := vidasJugador - 1.	(vidasJugador = 0) ifTrue: [ self getEscenario setEstadoJuegoPerdido: true. ].! !!AvionJugador methodsFor: 'accessing' stamp: 'Zhang 5/3/2011 02:49'!esInvencible	"Devuelve true si el avion esta en modo invencible, caso contrario false."	^invencible.! !!AvionJugador methodsFor: 'accessing' stamp: 'Zhang 5/3/2011 03:02'!ganaInvencibilidad	"El avion adquiere el estado de invencibilidad."	invencible := true.! !!AvionJugador methodsFor: 'accessing' stamp: 'Zhang 5/3/2011 02:50'!getTiempoInvencible	"Devuelve el tiempo de invencibilidad del avion."	^tiempoInvencible.! !!AvionJugador methodsFor: 'accessing' stamp: 'Zhang 5/3/2011 02:53'!getTiempoInvencibleCont	"Devuelve el contador del tiempo de invencibilidad del avion."	^tiempoInvencibleCont.! !!AvionJugador methodsFor: 'accessing' stamp: 'Zhang 5/4/2011 16:53'!getVidasJugador	"Devuelve la cantidad de vidas del jugador que controla el avion."	^vidasJugador.! !!AvionJugador methodsFor: 'accessing' stamp: 'Zhang 5/4/2011 17:17'!puedeMover: unPos	"Se fija si se puede moverse al lugar deseado."	(unPos y <= escenario getAlto) & (unPos y >= 0) & (unPos x <= escenario getAncho) & (unPos x >= 0)		ifTrue: [ ^true. ].	^false.! !AvionJugador subclass: #Algo43X	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Algo43X methodsFor: 'mantenimiento' stamp: 'Zhang 4/22/2011 01:07'!darMantenimiento	"Reparar al avion, que no funciona por falta de mantenimiento."	self subclassResponsibility.! !Avion subclass: #AvionEnemigo	instanceVariableNames: 'puntaje guia huir patronMovimiento'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!AvionEnemigo methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 15:55'!empezarAHuir	"Destruyeron al avion guia, y ahora los aviones de la flota van a huir."	1 to: (escenario getAvionesEnemigos size) do: [ :i |		(escenario getAvionesEnemigos at: i) setHuir: true.		(escenario getAvionesEnemigos at: i) yaNoPuedeDisparar. ].! !!AvionEnemigo methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 12:21'!esGuia	"Me devuelve True si el avion es un avion guia, caso contrario False"	^guia.! !!AvionEnemigo methodsFor: 'accessing' stamp: 'Zhang 5/4/2011 19:49'!getHuir	"Devuelve si los aviones estan huyendo o no."	^huir.! !!AvionEnemigo methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 07:50'!getPatronMovimiento	"Devuelve el patron de movimiento del avion."	^patronMovimiento.! !!AvionEnemigo methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 01:02'!getPuntaje	"Devuelve el puntaje del avion."	^puntaje.! !!AvionEnemigo methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 16:16'!setHuir: estado	"Cambia el estado de huir."	huir := estado.! !!AvionEnemigo methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 21:08'!colisionar	"El avion enemigo revisa si esta en contacto con algun avion jugador, neutral o bala.	Como el avion jugador ya revisa por los aviones enemigos, revisar a los aviones del jugador seria reduntante, asi que solo se checkearan aviones neutrales y balas."	| i  unAvion  danioDeChoque  unaBala  danioDeBala |	i := 1.	[i <= escenario getBalas size] whileTrue: [		unaBala := (escenario getBalas at: i).		(self distancia: (unaBala getPosicion) ) < (unaBala getTamanio + tamanio)			ifTrue: [				(unaBala getDireccion = 'haciaArriba')					ifTrue: [						danioDeBala := unaBala getDanio.						self recibirChoque: danioDeBala.						unaBala impactaSobreAvion.						]					ifFalse: [ i := i + 1. ].				]			ifFalse: [ i := i + 1. ].		].	i := 1.	[i <= escenario getAvionesNeutrales size] whileTrue: [		unAvion := (escenario getAvionesNeutrales at: i).		(unAvion distancia: posicion) < (unAvion getTamanio + tamanio)			ifTrue: [				danioDeChoque := ( self menorEnergia: unAvion ).				self recibirChoque: danioDeChoque.				unAvion recibirChoque: danioDeChoque.    				]			ifFalse: [ i := i + 1. ].		 ].! !!AvionEnemigo methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 15:15'!disparar	"El avion dispara cuando la velocidad de disparo de su/sus arma/armas sea igual al contador de la misma.	Algunos aviones no pueden disparar, como explorador; y los aviones que estan huyendo tampoco disparan."	(puedeDisparar = true)		ifTrue: [			1 to: (armas size) do: [ :index |				(armas at: index) disparar: escenario. ].			"El codigo esta generalizado para que el Bombardero tambien lo pueda utilizar."			].! !!AvionEnemigo methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 16:42'!morir	"El avion ha perdido toda su energia, y ahora se destruira.	Como es un avion enemigo, su destruccion suma puntos."	escenario modificarPuntaje: (puntaje).		(self esGuia = true)		ifTrue: [ self empezarAHuir. ].	(escenario getAvionesEnemigos size) > 0		ifTrue: [ (escenario getAvionesEnemigos) remove: (self)  ifAbsent: [ AvionDestruidoNoSeEncuentra new signal. ]. ].	! !!AvionEnemigo methodsFor: 'acciones' stamp: 'Zhang 5/4/2011 19:39'!morirPorLimite	"El avion se ha salido de los limites del escenario."	(escenario getAvionesEnemigos) remove: (self)  ifAbsent: [ AvionNoSeEncuentra new signal. ].! !!AvionEnemigo methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:48'!mover	"El avion avanza hacia su proxima posicion de acuerdo a su patron de movimiento"	(huir = false)		ifTrue: [ posicion := patronMovimiento proximaPosicion. ]		ifFalse: [ posicion := posicion + (0@1). ].! !!AvionEnemigo methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 16:29'!vivir	"Los aviones enemigos son simples, no tienen IA.	Tienen patrones de movimientos fijos, se mueven siempre de esa forma, y disparan ni bien su arma se ha recargado.	O sea, no tienen estrategia de ataque (se basan en su superioridad numerica para ganar)."		self pasaUnTiempo.	self mover.		(self fueraDelEscenario = true)		ifTrue: [ self morirPorLimite. ]		ifFalse: [			self disparar.			self colisionar.			].! !AvionEnemigo subclass: #Bombardero	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Bombardero methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 07:51'!crearBombarderoEn: posInicial  esGuia: avionGuia  dificultad: dificultad  sobre: unEscenario	"Constructor de bombardero."	| avionGuiaBonus |	posicion := posInicial.	escenario := unEscenario.	guia := avionGuia.	(guia = true)		ifTrue: [avionGuiaBonus := 1.5 ]		ifFalse: [avionGuiaBonus := 1].	energia := (200 * dificultad * avionGuiaBonus) asInteger.	tamanio := 8.	velocidad := 9.	velocidadCont := velocidad - 1.	armas := OrderedCollection new.		armas add: (CanionLaser new crearCanionLaserSobre: (self) conDireccion: 'haciaAbajo' ).		armas add: (LanzaTorpedoRastreador new crearLanzaTorpedoRastreadorSobre: (self) conDireccion: 'haciaAbajo' ).		armas add: (LanzaCohete new crearLanzaCoheteSobre: (self) conDireccion: 'haciaAbajo' ).	puedeDisparar := true.	puntaje := 30.	huir := false.	patronMovimiento := PatronZigZag new crearPatronZigZagEn: (self)  conDireccion: 'haciaIzquierda'.! !!Bombardero methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 10:33'!morir	"El avion ha perdido toda su energia, y ahora se destruira.	Como es un avion enemigo, su destruccion suma puntos.	Como es un bombardero, puede dejar algun tanque de armas. La posibilidad de que aparezca un tanque disminuye cuando aumenta la dificultad.	Las armas que puede dejar el bombardero son armas que esta posee, o sea cohetes y torpedos rastreadores."	| tanqueNuevo arma |	escenario modificarPuntaje: (puntaje).	(self esGuia = true)		ifTrue: [ self empezarAHuir. ].	( (100 atRandom) < (60 / escenario getDificultad) )	ifTrue: [		(2 atRandom = 2)			ifTrue: [ arma := 'torpedoRastreador'. ]			ifFalse: [ arma := 'cohete'. ].		tanqueNuevo := TanqueDeArma new crearTanqueDeArmaEn: (posicion) con: arma.		(escenario getTanques) add: tanqueNuevo.		].	(escenario getAvionesEnemigos) remove: (self)  ifAbsent: [AvionDestruidoNoSeEncuentra new signal. ].! !AvionEnemigo subclass: #Caza	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Caza methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 16:36'!morir	"El avion ha perdido toda su energia, y ahora se destruira.	Como es un avion enemigo, su destruccion suma puntos.	Como es un caza, puede dejar algun tanque de energia. La posibilidad de que aparezca un tanque disminuye cuando aumenta la dificultad.	La energia que da el tanque es siempre el mismo.."	| tanqueNuevo |	escenario modificarPuntaje: (puntaje).	(self esGuia = true)		ifTrue: [ self empezarAHuir. ].	( (100 atRandom) < (60 / escenario getDificultad) )		ifTrue: [		tanqueNuevo := TanqueDeEnergia new crearTanqueDeEnergiaEn: (posicion).		(escenario getTanques) add: tanqueNuevo.		].	(escenario getAvionesEnemigos) remove: (self)  ifAbsent: [AvionDestruidoNoSeEncuentra new signal. ].! !!Caza methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 07:52'!crearCazaEn: posInicial  esGuia: avionGuia  dificultad: dificultad  sobre: unEscenario	"Constructor de caza."	| avionGuiaBonus |	posicion := posInicial.	escenario := unEscenario.	guia := avionGuia.	(guia = true)		ifTrue: [avionGuiaBonus := 1.5 ]		ifFalse: [avionGuiaBonus := 1].	energia := (120 * dificultad * avionGuiaBonus) asInteger.	tamanio := 6.	velocidad := 7.	velocidadCont := velocidad - 1.	armas := OrderedCollection new.		armas add: (LanzaTorpedoSimple new crearLanzaTorpedoSimpleSobre: (self) conDireccion: 'haciaAbajo' ).	puedeDisparar := true.	puntaje := 30.	huir := false.	patronMovimiento := PatronLineal new crearPatronLinealEn: (self) conDireccion: 'haciaAbajo'.! !AvionEnemigo subclass: #Avioneta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Avioneta methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 07:51'!crearAvionetaEn: posInicial  esGuia: avionGuia  dificultad: dificultad  sobre: unEscenario	"Constructor de avioneta."	| avionGuiaBonus |	posicion := posInicial.	escenario := unEscenario.	guia := avionGuia.	(guia = true)		ifTrue: [avionGuiaBonus := 1.5 ]		ifFalse: [avionGuiaBonus := 1].	energia := (100 * dificultad * avionGuiaBonus) asInteger.	tamanio := 5.	velocidad := 5.	velocidadCont := velocidad - 1.	armas := OrderedCollection new.		armas add: (CanionLaser new crearCanionLaserSobre: (self) conDireccion: 'haciaAbajo' ).	puedeDisparar := true.	puntaje := 20.	huir := false.	patronMovimiento := PatronLinealIdaYVuelta new crearPatronLinealIdaYVueltaEn: (self)  conDireccion: 'haciaAbajo'.! !Municion subclass: #MunicionRastreador	instanceVariableNames: 'tiempoDeVida'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!MunicionRastreador methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 04:32'!avionMasCercano: unaListaDeAviones	"Busca el avion del tipo deseado mas cercano al torpedo rastreador."	| posMasCercano  unPos |	posMasCercano := ( ( (escenario getAncho) * 3) @ ( (escenario getAlto) * 3) ).	1 to: (unaListaDeAviones size) do: [ :i |		unPos := (unaListaDeAviones at: i) getPosicion.		(unPos squaredDistanceTo: posicion) < (posMasCercano squaredDistanceTo: posicion )			ifTrue: [ posMasCercano := unPos. ].		].	^posMasCercano.! !!MunicionRastreador methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 18:11'!getTiempoDeVida 	"Devuelve el tiempo restante de vida de la municion."	^tiempoDeVida.! !!MunicionRastreador methodsFor: 'acciones' stamp: 'Zhang 5/3/2011 04:41'!pasaUnTiempo	"Pasa una unidad abstracta de tiempo.	No solo actualiza el contador de velocidad, tambien decrece el tiempo de vida."	(velocidadCont = velocidad)		ifFalse: [			velocidadCont := velocidadCont + 1.						(velocidadCont > velocidad)				ifTrue: [ VelocidadContNoValido new signal. ].			].	tiempoDeVida := tiempoDeVida - 1.	(tiempoDeVida = 0) ifTrue: [ self morir. ].! !!MunicionRastreador methodsFor: 'as yet unclassified' stamp: 'Zhang 5/5/2011 12:50'!mover	"El movimiento de un arma rastreador.	Dependiendo de la direccion, la bala apuntara a un avion enemigo o jugador.	Si no hay aviones del tipo que apunta, seguira derecho."	| objetivoPos |	(velocidadCont = velocidad)		ifTrue: [			(direccion = 'haciaAbajo')				ifTrue: [					(escenario getAvionesJugador size > 0)						ifTrue: [ objetivoPos := self avionMasCercano: (escenario getAvionesJugador). ]						ifFalse: [ objetivoPos := posicion].					]				ifFalse: [					(escenario getAvionesEnemigos size > 0)						ifTrue: [ objetivoPos := self avionMasCercano: (escenario getAvionesEnemigos). ]						ifFalse: [ objetivoPos := posicion].   					].			(objetivoPos = posicion)				ifTrue: [					(direccion = 'haciaAbajo')						ifTrue: [ posicion := posicion + (0 @ -1). ]						ifFalse: [ posicion := posicion + (0@1). ].					]				ifFalse: [					(objetivoPos x > posicion x)						ifTrue: [ posicion := posicion + (1@0). ]						ifFalse: [							(objetivoPos x < posicion x)								ifTrue: [ posicion := posicion - (1@0).]   								"Si (objetivoPos x = posicion x) , no cambiara su valor en x."							].					(objetivoPos y > posicion y)						ifTrue: [ posicion := posicion + (0@1). ]						ifFalse: [							(objetivoPos y < posicion y)								ifTrue: [ posicion := posicion - (0@1).]   								"Si (objetivoPos y = posicion y) , no cambiara su valor en y."							].					].			velocidadCont := 0.			].! !PatronDeMovimiento subclass: #PatronCircular	instanceVariableNames: 'centro radio avanzarVel avanzarVelCont movCirc movCircCont'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!PatronCircular methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:50'!proximaPosicion	"Patron de movimiento circular."	| posNuevo  ro |	movCircCont := movCircCont + 0.1 .		(movCircCont >= movCirc) ifTrue: [movCircCont := 0].	ro := (movCircCont * Float pi).	posNuevo := ( ( ro cos * radio ) asInteger) @ ( ( ro sin * radio ) asInteger).	(direccion := 'haciaAbajo')		ifTrue: [	centro := centro - (0@1). ]		ifFalse: [			(direccion := 'haciaIzquierda')				ifTrue: [ centro := centro - (1@0). ]				ifFalse: [					(direccion = 'haciaDerecha')						ifTrue: [ centro := centro + (1@0). ]						ifFalse: [							(direccion := 'haciaArriba')								ifTrue: [ centro := centro + (0@1). ]								ifFalse: [ DireccionNoValida new signal. ].							].					].			].	posNuevo := posNuevo + centro.	^posNuevo.! !!PatronCircular methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 07:42'!crearPatronCircularEn: unAvion  conDireccion: unaDireccion  conPosInicial: unPos	"Le otorga el patron de movimiento circular a un avion, indicandole la direccion del mismo."	avion := unAvion.	direccion := unaDireccion.	centro := unPos.	(direccion = 'haciaAbajo')		ifTrue: [			radio := (avion getEscenario getAncho - 20) / 2.			avanzarVel := 15.			avanzarVelCont := 0.			movCircCont := 1.			]		ifFalse: [			(direccion = 'haciaIzquierda')				ifTrue: [					radio := (avion getTamanio * 3).					avanzarVel := 10.					avanzarVelCont := 0.					movCircCont := 1/2.					].				].	movCirc := 2.	! !Avion subclass: #AvionNeutral	instanceVariableNames: 'puntaje patronMovimiento'	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!AvionNeutral methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 02:43'!colisionar	"El avion neutral revisa si esta en contacto con algun avion jugador, enemigo o bala.	Como los aviones jugadores y aviones enemigos ya revisan por los aviones neutrales, revisar estos aviones seria reduntante, asi que solo se analizaran balas."	| i  unaBala  danioDeBala |	i := 1.	[i <= escenario getBalas size] whileTrue: [		unaBala := (escenario getBalas at: i).		(self distancia: (unaBala getPosicion) ) < (unaBala getTamanio + tamanio)			ifTrue: [				danioDeBala := unaBala getDanio.				self recibirChoque: danioDeBala.				unaBala impactaSobreAvion.				]				ifFalse: [ i := i + 1. ].		].! !!AvionNeutral methodsFor: 'acciones' stamp: 'Zhang 5/3/2011 04:57'!disparar	"Los aviones neutrales actualmente presentes nunca dispararan."	| index |	(puedeDisparar = true)	ifTrue: [		AvionNeutralDispara new signal.		"1 to: (armas size) do: [ index |			(armas at: index) disparar: escenario. ]."		].! !!AvionNeutral methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 16:43'!morir	"El avion ha perdido toda su energia, y ahora se destruira.	Como es un avion neutral, su destruccion resta puntaje."	escenario modificarPuntaje: (puntaje).	(escenario getAvionesNeutrales size) > 0		ifTrue: [ (escenario getAvionesNeutrales) remove: (self)  ifAbsent: [AvionDestruidoNoSeEncuentra new signal. ]. ]	.! !!AvionNeutral methodsFor: 'acciones' stamp: 'Zhang 5/4/2011 19:36'!morirPorLimite	"El avion se ha salido de los limites del escenario."	(escenario getAvionesNeutrales) remove: (self)  ifAbsent: [AvionNoSeEncuentra new signal. ].! !!AvionNeutral methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 08:41'!mover	"El avion avanza hacia su proxima posicion de acuerdo a su patron de movimiento"	posicion := patronMovimiento proximaPosicion.! !!AvionNeutral methodsFor: 'acciones' stamp: 'Zhang 5/3/2011 05:02'!vivir	"Los aviones neutrales solo se mueven hacia el lado contrario del escenario.	No disparan, ni tratan de evitar ningun avion. Asi que depende de la proteccion de los aviones del jugador para sobrevivir."	self pasaUnTiempo.	self mover.	[self disparar] on: AvionNeutralDispara do: [ puedeDisparar := false. ].! !!AvionNeutral methodsFor: 'accessing' stamp: 'Zhang 5/5/2011 07:50'!getPatronMovimiento	"Devuelve el patron de movimiento del avion."	^patronMovimiento.! !!AvionNeutral methodsFor: 'accessing' stamp: 'Zhang 4/22/2011 01:02'!getPuntaje	"Devuelve el puntaje del avion."	^puntaje.! !AvionNeutral subclass: #AvionCivil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!AvionCivil methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 16:07'!crearAvionCivilEn: posInicial  sobre: unEscenario	"Constructor de avion civil."	posicion := posInicial.	escenario := unEscenario.	energia := 400.	tamanio := 6.	velocidad := 7.	velocidadCont := velocidad - 1.	armas := OrderedCollection new.		"El avion civil no tiene armas."	puedeDisparar := false.	puntaje := -300.	patronMovimiento := PatronLineal new crearPatronLinealEn: (self) conDireccion: 'haciaIzquierda'.! !Arma subclass: #LanzaTorpedoRastreador	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!LanzaTorpedoRastreador methodsFor: 'initialize' stamp: 'Zhang 5/1/2011 16:33'!crearLanzaTorpedoRastreadorSobre: unAvion  conDireccion: unaDireccion		cantidadMunicion := 15.	velocidadDisparo := 120.	velocidadDisparoCont := velocidadDisparo - 1.	avion := unAvion.	direccion := unaDireccion.! !!LanzaTorpedoRastreador methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 15:16'!disparar: unEscenario	"El arma dispara, fijandose antes si tiene municiones, y tambien si se ha recargado o no."	| balaNueva |	(velocidadDisparoCont = velocidadDisparo)		ifTrue:			[ (cantidadMunicion > 0)			ifTrue:				[								balaNueva := TorpedoRastreador new crearTorpedoRastreadorEn: (avion getPosicion)  conDireccion: (direccion).				(unEscenario getBalas) add: balaNueva.				cantidadMunicion := cantidadMunicion - 1.				].			velocidadDisparoCont := 0.			].! !PatronDeMovimiento subclass: #PatronLinealIdaYVuelta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!PatronLinealIdaYVuelta methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:51'!proximaPosicion	"Patron de movimiento lineal con idas y vueltas.	El movimiento solo verifica el limite inferior del escenario, asi que el avion ira derecho hacia abajo, luego volvera por ese camino, y si no fue destruido todavia, se saldra por la parte superior del escenario.	Esto es para que no se quede haciendo idas y vueltas infinitamente en el escenario."	| posNuevo |	(direccion = 'haciaAbajo')		ifTrue: [			( (avion getPosicion y) - 1) > 0				ifTrue: [ posNuevo := avion getPosicion - (0@1). ]				ifFalse: [					direccion := 'haciaArriba'.					posNuevo := avion getPosicion + (0@1).					].			]		ifFalse: [			(direccion = 'haciaArriba')				ifTrue: [ posNuevo := avion getPosicion + (0@1). ].			].	^posNuevo.  ! !!PatronLinealIdaYVuelta methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 05:39'!crearPatronLinealIdaYVueltaEn: unAvion  conDireccion: unaDireccion	"Le otorga el patron de movimiento lineal con idas y vueltas a un avion, indicandole la direccion inicial del mismo."	avion := unAvion.	direccion := unaDireccion.! !PatronDeMovimiento subclass: #PatronLineal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!PatronLineal methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 06:07'!proximaPosicion	"Patron de movimiento lineal. Puede ser para cualquiera de las 4 direcciones."	| posNuevo |	(direccion = 'haciaAbajo')		ifTrue: [ posNuevo := avion getPosicion + (0 @ -1). ]		ifFalse: [			(direccion = 'haciaIzquierda')				ifTrue: [ posNuevo := avion getPosicion + (-1 @ 0). ]				ifFalse: [					(direccion = 'haciaArriba')						ifTrue: [ posNuevo := avion getPosicion + (0 @ 1). ]						ifFalse: [							(direccion = 'haciaDerecha')								ifTrue: [ posNuevo := avion getPosicion + (1 @ 0). ]								ifFalse: [ DireccionNoValida new signal. ].  							].					].			].	^posNuevo.! !!PatronLineal methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 05:37'!crearPatronLinealEn: unAvion  conDireccion: unaDireccion	"Le otorga el patron de movimiento lineal a un avion, indicandole la direccion del mismo."	avion := unAvion.	direccion := unaDireccion.! !AvionNeutral subclass: #HelicopteroPF	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!HelicopteroPF methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 16:07'!crearHelicopteroPFEn: posInicial  sobre: unEscenario	"Constructor de helicoptero de la policia federal."	posicion := posInicial.	escenario := unEscenario.	energia := 350.	tamanio := 5.	velocidad := 6.	velocidadCont := velocidad - 1.	armas := OrderedCollection new.		armas add: (CanionLaser new).		armas add: (LanzaTorpedoSimple new).	puedeDisparar := false.		"Aunque el helicopetero tiene armas, tiene orden de no disparar."	puntaje := -200.	patronMovimiento := PatronCircular new crearPatronCircularEn: (self)  conDireccion: 'haciaIzquierda'  conPosInicial: posInicial.! !MunicionRastreador subclass: #TorpedoRastreador	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!TorpedoRastreador methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 04:05'!crearTorpedoRastreadorEn: posInicial  conDireccion: unaDireccion	| temporary variable names |		posicion := posInicial.	danio := 200.	tamanio := 2.	velocidad := 6.	velocidadCont := velocidad - 1.	direccion := unaDireccion.	tiempoDeVida := 1200.! !Arma subclass: #CanionLaser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!CanionLaser methodsFor: 'acciones' stamp: 'Zhang 5/1/2011 18:02'!disparar: unEscenario	"El arma dispara, fijandose antes si se ha recargado o no.	No hace falta revisar su municion ya que es infinita."	| balaNueva |	(velocidadDisparoCont = velocidadDisparo)		ifTrue:			[ balaNueva := Laser new crearLaserEn: (avion getPosicion) conDireccion: (direccion).			(unEscenario getBalas) add: balaNueva.					velocidadDisparoCont := 0.			].! !!CanionLaser methodsFor: 'initialize' stamp: 'Zhang 5/3/2011 05:19'!crearCanionLaserSobre: unAvion  conDireccion: unaDireccion	cantidadMunicion := Float infinity.	velocidadDisparo := 8.	velocidadDisparoCont := velocidadDisparo - 1.	avion := unAvion.	direccion := unaDireccion.! !MunicionNoRastreador subclass: #Cohete	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Cohete methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 04:04'!crearCoheteEn: posInicial  conDireccion: unaDireccion	"Crea un cohete sobre el escenario."		posicion := posInicial.	danio := 250.	tamanio := 3.	velocidad := 12.	velocidadCont := velocidad - 1.	direccion := unaDireccion.! !!Cohete methodsFor: 'acciones' stamp: 'Zhang 5/5/2011 12:49'!mover	"Los cohetes empiezan lentos (el numero de velocidad es alta), pero con el tiempo se van acelerando."	(velocidadCont = velocidad)		ifTrue:			[ (direccion = 'haciaAbajo')				ifTrue: 					[ posicion := posicion - (0@1). ]				ifFalse:					[ posicion := posicion + (0@1). ].				(velocidad > 2) ifTrue: [velocidad := velocidad - 1. ].				velocidadCont := 0.			].! !Arma subclass: #LanzaTorpedoSimple	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!LanzaTorpedoSimple methodsFor: 'initialize' stamp: 'Zhang 5/1/2011 18:19'!crearLanzaTorpedoSimpleSobre: unAvion  conDireccion: unaDireccion		cantidadMunicion := 45.	velocidadDisparo := 60.	velocidadDisparoCont := velocidadDisparo - 1.	avion := unAvion.	direccion := unaDireccion.! !!LanzaTorpedoSimple methodsFor: 'acciones' stamp: 'Zhang 5/1/2011 18:00'!disparar: unEscenario	"El arma dispara, fijandose antes si tiene municiones, y tambien si se ha recargado o no."	| balaNueva |	(velocidadDisparoCont = velocidadDisparo)		ifTrue:			[ (cantidadMunicion > 0)			ifTrue:				[ balaNueva := TorpedoSimple new crearTorpedoSimpleEn: (avion getPosicion)  conDireccion: (direccion).				(unEscenario getBalas) add: balaNueva.				cantidadMunicion := cantidadMunicion -1.				].			velocidadDisparoCont := 0.			].! !AvionJugador subclass: #Algo42	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Algo42 methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 13:24'!crearAlgo42en: posInicial  sobre: unEscenario	"Crea el avion Algo42."	posicion := posInicial.	escenario := unEscenario.	energia := 1000.	tamanio := 5.	velocidad := 5.	velocidadCont := velocidad - 1.	armas := OrderedCollection new.		armas add: (CanionLaser new crearCanionLaserSobre: (self) conDireccion: 'haciaArriba' ).		armas add: (LanzaCohete new crearLanzaCoheteSobre: (self) conDireccion: 'haciaArriba' ).		armas add: (LanzaTorpedoRastreador new crearLanzaTorpedoRastreadorSobre: (self) conDireccion: 'haciaArriba' ).		self resetearArmas.	puedeDisparar := true.	invencible := false.	tiempoInvencible := 25.	tiempoInvencibleCont := tiempoInvencible.	vidasJugador := 3.! !AvionEnemigo subclass: #Explorador	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '92333-TP1-2042/Aviones'!!Explorador methodsFor: 'initialize' stamp: 'Zhang 5/5/2011 07:53'!crearExploradorEn: posInicial  esGuia: avionGuia  dificultad: dificultad  sobre: unEscenario	"Constructor de explorador.."	| avionGuiaBonus |	posicion := posInicial.	escenario := unEscenario.	guia := avionGuia.	(guia = true)		ifTrue: [avionGuiaBonus := 1.5 ]		ifFalse: [avionGuiaBonus := 1].	energia := (180 * dificultad * avionGuiaBonus) asInteger.	tamanio := 5.	velocidad := 6.	velocidadCont := velocidad - 1.	armas := OrderedCollection new.	puedeDisparar := false.	puntaje := 50.	huir := false.	patronMovimiento := PatronCircular new crearPatronCircularEn: (self)  conDireccion: 'haciaAbajo'  conPosInicial: posInicial.! !